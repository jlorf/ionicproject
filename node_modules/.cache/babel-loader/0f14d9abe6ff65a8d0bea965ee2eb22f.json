{"ast":null,"code":"import { __rest } from 'tslib';\nimport React from 'react';\nimport { matchPath, withRouter, BrowserRouter, HashRouter } from 'react-router-dom';\nimport { NavContext, IonLifeCycleContext, DefaultIonLifeCycleContext, getConfig } from '@ionic/react';\nimport { Redirect, matchPath as matchPath$1, MemoryRouter } from 'react-router';\nlet count = 0;\n\nconst generateId = () => (count++).toString();\n\nconst isDevMode = () => {\n  return process && process.env && process.env.NODE_ENV === 'development';\n};\n\nconst RESTRICT_SIZE = 25;\n\nclass LocationHistory {\n  constructor() {\n    this.locationHistory = [];\n  }\n\n  add(location) {\n    this.locationHistory.push(location);\n\n    if (this.locationHistory.length > RESTRICT_SIZE) {\n      this.locationHistory.splice(0, 10);\n    }\n  }\n\n  pop() {\n    this.locationHistory.pop();\n  }\n\n  replace(location) {\n    this.locationHistory.pop();\n    this.locationHistory.push(location);\n  }\n\n  clear() {\n    this.locationHistory = [];\n  }\n\n  findLastLocationByUrl(url) {\n    for (let i = this.locationHistory.length - 1; i >= 0; i--) {\n      const location = this.locationHistory[i];\n\n      if (location.pathname.toLocaleLowerCase() === url.toLocaleLowerCase()) {\n        return location;\n      }\n    }\n\n    return undefined;\n  }\n\n  previous() {\n    return this.locationHistory[this.locationHistory.length - 2];\n  }\n\n  current() {\n    return this.locationHistory[this.locationHistory.length - 1];\n  }\n\n}\n/**\n * The holistic view of all the Routes configured for an application inside of an IonRouterOutlet.\n */\n\n\nclass ViewStacks {\n  constructor() {\n    this.viewStacks = {};\n  }\n\n  get(key) {\n    return this.viewStacks[key];\n  }\n\n  set(key, viewStack) {\n    this.viewStacks[key] = viewStack;\n  }\n\n  getKeys() {\n    return Object.keys(this.viewStacks);\n  }\n\n  delete(key) {\n    delete this.viewStacks[key];\n  }\n\n  findViewInfoByLocation(location, viewKey) {\n    let view;\n    let match;\n    let viewStack;\n    viewStack = this.viewStacks[viewKey];\n\n    if (viewStack) {\n      viewStack.views.some(matchView);\n\n      if (!view) {\n        viewStack.views.some(r => {\n          // try to find a route that doesn't have a path or from prop, that will be our not found route\n          if (!r.routeData.childProps.path && !r.routeData.childProps.from) {\n            match = {\n              path: location.pathname,\n              url: location.pathname,\n              isExact: true,\n              params: {}\n            };\n            view = r;\n            return true;\n          }\n\n          return false;\n        });\n      }\n    }\n\n    return {\n      view,\n      viewStack,\n      match\n    };\n\n    function matchView(v) {\n      const matchProps = {\n        exact: v.routeData.childProps.exact,\n        path: v.routeData.childProps.path || v.routeData.childProps.from,\n        component: v.routeData.childProps.component\n      };\n      const myMatch = matchPath(location.pathname, matchProps);\n\n      if (myMatch) {\n        view = v;\n        match = myMatch;\n        return true;\n      }\n\n      return false;\n    }\n  }\n\n  findViewInfoById(id = '') {\n    let view;\n    let viewStack;\n    const keys = this.getKeys();\n    keys.some(key => {\n      const vs = this.viewStacks[key];\n      view = vs.views.find(x => x.id === id);\n\n      if (view) {\n        viewStack = vs;\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return {\n      view,\n      viewStack\n    };\n  }\n\n}\n\nconst RouteManagerContext = /*@__PURE__*/React.createContext({\n  viewStacks: new ViewStacks(),\n  syncView: () => {\n    navContextNotFoundError();\n  },\n  syncRoute: () => {\n    navContextNotFoundError();\n  },\n  hideView: () => {\n    navContextNotFoundError();\n  },\n  setupIonRouter: () => Promise.reject(navContextNotFoundError()),\n  removeViewStack: () => {\n    navContextNotFoundError();\n  },\n  getRoute: () => {\n    navContextNotFoundError();\n  }\n});\n\nfunction navContextNotFoundError() {\n  console.error('IonReactRouter not found, did you add it to the app?');\n}\n/**\n * The View component helps manage the IonPage's lifecycle and registration\n */\n\n\nclass View extends React.Component {\n  componentDidMount() {\n    /**\n     * If we can tell if view is a redirect, hide it so it will work again in future\n     */\n    const {\n      view,\n      route\n    } = this.props;\n\n    if (route.type === Redirect) {\n      this.props.onHideView(view.id);\n    } else if (route.props.render && !view.isIonRoute) {\n      // Test the render to see if it returns a redirect\n      if (route.props.render().type === Redirect) {\n        this.props.onHideView(view.id);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.ionPage) {\n      this.ionPage.removeEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n      this.ionPage.removeEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n      this.ionPage.removeEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n      this.ionPage.removeEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n    }\n  }\n\n  ionViewWillEnterHandler() {\n    this.context.ionViewWillEnter();\n  }\n\n  ionViewDidEnterHandler() {\n    this.context.ionViewDidEnter();\n  }\n\n  ionViewWillLeaveHandler() {\n    this.context.ionViewWillLeave();\n  }\n\n  ionViewDidLeaveHandler() {\n    this.context.ionViewDidLeave();\n  }\n\n  registerIonPage(page) {\n    this.ionPage = page;\n    this.ionPage.addEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n    this.ionPage.addEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n    this.ionPage.addEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n    this.ionPage.addEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n    this.ionPage.classList.add('ion-page-invisible');\n\n    if (isDevMode()) {\n      this.ionPage.setAttribute('data-view-id', this.props.view.id);\n    }\n\n    this.props.onViewSync(page, this.props.view.id);\n  }\n\n  render() {\n    return React.createElement(NavContext.Consumer, null, value => {\n      const newProvider = Object.assign(Object.assign({}, value), {\n        registerIonPage: this.registerIonPage.bind(this)\n      });\n      return React.createElement(NavContext.Provider, {\n        value: newProvider\n      }, this.props.children);\n    });\n  }\n\n  static get contextType() {\n    return IonLifeCycleContext;\n  }\n\n}\n/**\n * Manages the View's DOM lifetime by keeping it around long enough to complete page transitions before removing it.\n */\n\n\nclass ViewTransitionManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ionLifeCycleContext = new DefaultIonLifeCycleContext();\n    this._isMounted = false;\n    this.state = {\n      show: true\n    };\n    this.ionLifeCycleContext.onComponentCanBeDestroyed(() => {\n      if (!this.props.mount) {\n        if (this._isMounted) {\n          this.setState({\n            show: false\n          }, () => {\n            this.context.hideView(this.props.id);\n          });\n        }\n      }\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const {\n      show\n    } = this.state;\n    return React.createElement(IonLifeCycleContext.Provider, {\n      value: this.ionLifeCycleContext\n    }, show && this.props.children);\n  }\n\n  static get contextType() {\n    return RouteManagerContext;\n  }\n\n}\n\nclass StackManagerInner extends React.Component {\n  constructor(props) {\n    super(props);\n    this.routerOutletEl = React.createRef();\n    this.id = this.props.id || generateId();\n    this.handleViewSync = this.handleViewSync.bind(this);\n    this.handleHideView = this.handleHideView.bind(this);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.props.routeManager.setupIonRouter(this.id, this.props.children, this.routerOutletEl.current);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    props.routeManager.syncRoute(props.children);\n    return state;\n  }\n\n  componentWillUnmount() {\n    this.props.routeManager.removeViewStack(this.id);\n  }\n\n  handleViewSync(page, viewId) {\n    this.props.routeManager.syncView(page, viewId);\n  }\n\n  handleHideView(viewId) {\n    this.props.routeManager.hideView(viewId);\n  }\n\n  renderChild(item, route) {\n    const component = React.cloneElement(route, {\n      computedMatch: item.routeData.match\n    });\n    return component;\n  }\n\n  render() {\n    const routeManager = this.props.routeManager;\n    const viewStack = routeManager.viewStacks.get(this.id);\n    const views = (viewStack || {\n      views: []\n    }).views.filter(x => x.show);\n    const ionRouterOutlet = React.Children.only(this.props.children);\n    const childElements = views.map(view => {\n      const route = routeManager.getRoute(view.routeId);\n      return React.createElement(ViewTransitionManager, {\n        id: view.id,\n        key: view.key,\n        mount: view.mount\n      }, React.createElement(View, {\n        onViewSync: this.handleViewSync,\n        onHideView: this.handleHideView,\n        view: view,\n        route: route\n      }, this.renderChild(view, route)));\n    });\n    const elementProps = {\n      ref: this.routerOutletEl\n    };\n\n    if (ionRouterOutlet.props.forwardedRef) {\n      ionRouterOutlet.props.forwardedRef.current = this.routerOutletEl;\n    }\n\n    if (isDevMode()) {\n      elementProps['data-stack-id'] = this.id;\n    }\n\n    const routerOutletChild = React.cloneElement(ionRouterOutlet, elementProps, childElements);\n    return routerOutletChild;\n  }\n\n}\n\nconst withContext = Component => {\n  return props => React.createElement(RouteManagerContext.Consumer, null, context => React.createElement(Component, Object.assign({}, props, {\n    routeManager: context\n  })));\n};\n\nconst StackManager = withContext(StackManagerInner);\n\nclass NavManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      goBack: this.goBack.bind(this),\n      hasIonicRouter: () => true,\n      navigate: this.navigate.bind(this),\n      getStackManager: this.getStackManager.bind(this),\n      getPageManager: this.getPageManager.bind(this),\n      currentPath: this.props.location.pathname,\n      registerIonPage: () => {\n        return;\n      } // overridden in View for each IonPage\n\n    };\n    this.listenUnregisterCallback = this.props.history.listen(location => {\n      this.setState({\n        currentPath: location.pathname\n      });\n    });\n\n    if (document) {\n      document.addEventListener('ionBackButton', e => {\n        e.detail.register(0, () => {\n          this.props.history.goBack();\n        });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.listenUnregisterCallback) {\n      this.listenUnregisterCallback();\n    }\n  }\n\n  goBack(defaultHref) {\n    this.props.onNavigateBack(defaultHref);\n  }\n\n  navigate(path, direction, ionRouteAction = 'push') {\n    this.props.onNavigate(ionRouteAction, path, direction);\n  }\n\n  getPageManager() {\n    return children => children;\n  }\n\n  getStackManager() {\n    return StackManager;\n  }\n\n  render() {\n    return React.createElement(NavContext.Provider, {\n      value: this.state\n    }, this.props.children);\n  }\n\n}\n\nclass RouteManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.locationHistory = new LocationHistory();\n    this.routes = {};\n    this.ionPageElements = {};\n    this.routerOutlets = {};\n    this.firstRender = true;\n    this.listenUnregisterCallback = this.props.history.listen(this.historyChange.bind(this));\n    this.handleNavigate = this.handleNavigate.bind(this);\n    this.navigateBack = this.navigateBack.bind(this);\n    this.state = {\n      viewStacks: new ViewStacks(),\n      hideView: this.hideView.bind(this),\n      setupIonRouter: this.setupIonRouter.bind(this),\n      removeViewStack: this.removeViewStack.bind(this),\n      syncView: this.syncView.bind(this),\n      syncRoute: this.syncRoute.bind(this),\n      getRoute: this.getRoute.bind(this)\n    };\n    this.locationHistory.add({\n      hash: window.location.hash,\n      key: generateId(),\n      pathname: window.location.pathname,\n      search: window.location.search,\n      state: {}\n    });\n  }\n\n  componentDidUpdate(_prevProps, prevState) {\n    // Trigger a page change if the location or action is different\n    if (this.state.location && prevState.location !== this.state.location || prevState.action !== this.state.action) {\n      const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n      this.setActiveView(this.state.location, this.state.action, viewStacks);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.listenUnregisterCallback) {\n      this.listenUnregisterCallback();\n    }\n  }\n\n  getRoute(id) {\n    return this.routes[id];\n  }\n\n  hideView(viewId) {\n    const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n    const {\n      view\n    } = viewStacks.findViewInfoById(viewId);\n\n    if (view) {\n      view.show = false;\n      view.isIonRoute = false;\n      view.prevId = undefined;\n      view.key = generateId();\n      delete this.ionPageElements[view.id];\n      this.setState({\n        viewStacks\n      });\n    }\n  }\n\n  historyChange(location, action) {\n    const ionRouteAction = this.currentIonRouteAction === 'pop' ? 'pop' : action.toLowerCase();\n    let direction = this.currentRouteDirection;\n\n    if (ionRouteAction === 'push') {\n      this.locationHistory.add(location);\n    } else if (ionRouteAction === 'pop') {\n      this.locationHistory.pop();\n      direction = direction || 'back';\n    } else if (ionRouteAction === 'replace') {\n      this.locationHistory.replace(location);\n      direction = 'none';\n    }\n\n    if (direction === 'root') {\n      this.locationHistory.clear();\n      this.locationHistory.add(location);\n    }\n\n    location.state = location.state || {\n      direction\n    };\n    this.setState({\n      location,\n      action: ionRouteAction\n    });\n    this.currentRouteDirection = undefined;\n    this.currentIonRouteAction = undefined;\n  }\n\n  setActiveView(location, action, viewStacks) {\n    let direction = location.state && location.state.direction || 'forward';\n    let leavingView;\n    const viewStackKeys = viewStacks.getKeys();\n    let shouldTransitionPage = false;\n    let leavingViewHtml;\n    viewStackKeys.forEach(key => {\n      const {\n        view: enteringView,\n        viewStack: enteringViewStack,\n        match\n      } = viewStacks.findViewInfoByLocation(location, key);\n\n      if (!enteringView || !enteringViewStack) {\n        return;\n      }\n\n      leavingView = viewStacks.findViewInfoById(this.activeIonPageId).view;\n\n      if (enteringView.isIonRoute) {\n        enteringView.show = true;\n        enteringView.mount = true;\n        enteringView.routeData.match = match;\n        shouldTransitionPage = true;\n        this.activeIonPageId = enteringView.id;\n\n        if (leavingView) {\n          if (action === 'push' && direction === 'forward') {\n            /**\n             * If the page is being pushed into the stack by another view,\n             * record the view that originally directed to the new view for back button purposes.\n             */\n            enteringView.prevId = leavingView.id;\n          } else if (direction !== 'none') {\n            leavingView.mount = false;\n            this.removeOrphanedViews(enteringView, enteringViewStack);\n          }\n\n          leavingViewHtml = enteringView.id === leavingView.id ? this.ionPageElements[leavingView.id].outerHTML : undefined;\n        } else {\n          // If there is not a leavingView, then we shouldn't provide a direction\n          direction = undefined;\n        }\n      } else {\n        enteringView.show = true;\n        enteringView.mount = true;\n        enteringView.routeData.match = match;\n      }\n    });\n\n    if (leavingView) {\n      if (!leavingView.isIonRoute) {\n        leavingView.mount = false;\n        leavingView.show = false;\n      }\n    }\n\n    this.setState({\n      viewStacks\n    }, () => {\n      if (shouldTransitionPage) {\n        const {\n          view: enteringView,\n          viewStack\n        } = this.state.viewStacks.findViewInfoById(this.activeIonPageId);\n\n        if (enteringView && viewStack) {\n          const enteringEl = this.ionPageElements[enteringView.id];\n          const leavingEl = leavingView && this.ionPageElements[leavingView.id];\n\n          if (enteringEl) {\n            let navDirection;\n\n            if (leavingEl && leavingEl.innerHTML === '') {\n              // Don't animate from an empty view\n              navDirection = undefined;\n            } else if (direction === 'none' || direction === 'root') {\n              navDirection = undefined;\n            } else {\n              navDirection = direction;\n            }\n\n            const shouldGoBack = !!enteringView.prevId;\n            const routerOutlet = this.routerOutlets[viewStack.id];\n            this.commitView(enteringEl, leavingEl, routerOutlet, navDirection, shouldGoBack, leavingViewHtml);\n          } else if (leavingEl) {\n            leavingEl.classList.add('ion-page-hidden');\n            leavingEl.setAttribute('aria-hidden', 'true');\n          }\n        } // Warn if an IonPage was not eventually rendered in Dev Mode\n\n\n        if (isDevMode()) {\n          if (enteringView && enteringView.routeData.match.url !== location.pathname) {\n            setTimeout(() => {\n              const {\n                view\n              } = this.state.viewStacks.findViewInfoById(this.activeIonPageId);\n\n              if (view.routeData.match.url !== location.pathname) {\n                console.warn('No IonPage was found to render. Make sure you wrap your page with an IonPage component.');\n              }\n            }, 100);\n          }\n        }\n      }\n    });\n  }\n\n  removeOrphanedViews(view, viewStack) {\n    // Note: This technique is a bit wonky for views that reference each other and get into a circular loop.\n    // It can still remove a view that probably shouldn't be.\n    const viewsToRemove = viewStack.views.filter(v => v.prevId === view.id);\n    viewsToRemove.forEach(v => {\n      // Don't remove if view is currently active\n      if (v.id !== this.activeIonPageId) {\n        this.removeOrphanedViews(v, viewStack); // If view is not currently visible, go ahead and remove it from DOM\n\n        const page = this.ionPageElements[v.id];\n\n        if (page.classList.contains('ion-page-hidden')) {\n          v.show = false;\n          v.isIonRoute = false;\n          v.prevId = undefined;\n          v.key = generateId();\n          delete this.ionPageElements[v.id];\n        }\n\n        v.mount = false;\n      }\n    });\n  }\n\n  setupIonRouter(id, children, routerOutlet) {\n    const views = [];\n    let activeId;\n    const ionRouterOutlet = React.Children.only(children);\n    let foundMatch = false;\n    React.Children.forEach(ionRouterOutlet.props.children, child => {\n      const routeId = generateId();\n      this.routes[routeId] = child;\n      views.push(createViewItem(child, routeId, this.props.history.location));\n    });\n\n    if (!foundMatch) {\n      const notFoundRoute = views.find(r => {\n        // try to find a route that doesn't have a path or from prop, that will be our not found route\n        return !r.routeData.childProps.path && !r.routeData.childProps.from;\n      });\n\n      if (notFoundRoute) {\n        notFoundRoute.show = true;\n      }\n    }\n\n    this.registerViewStack(id, activeId, views, routerOutlet, this.props.location);\n\n    function createViewItem(child, routeId, location) {\n      const viewId = generateId();\n      const key = generateId(); // const route = child;\n\n      const matchProps = {\n        exact: child.props.exact,\n        path: child.props.path || child.props.from,\n        component: child.props.component\n      };\n      const match = matchPath(location.pathname, matchProps);\n      const view = {\n        id: viewId,\n        key,\n        routeData: {\n          match,\n          childProps: child.props\n        },\n        routeId,\n        mount: true,\n        show: !!match,\n        isIonRoute: false\n      };\n\n      if (match && view.isIonRoute) {\n        activeId = viewId;\n      }\n\n      if (!foundMatch && match) {\n        foundMatch = true;\n      }\n\n      return view;\n    }\n  }\n\n  registerViewStack(stack, activeId, stackItems, routerOutlet, _location) {\n    this.setState(prevState => {\n      const prevViewStacks = Object.assign(new ViewStacks(), prevState.viewStacks);\n      const newStack = {\n        id: stack,\n        views: stackItems\n      };\n      this.routerOutlets[stack] = routerOutlet;\n\n      if (activeId) {\n        this.activeIonPageId = activeId;\n      }\n\n      prevViewStacks.set(stack, newStack);\n      return {\n        viewStacks: prevViewStacks\n      };\n    }, () => {\n      this.setupRouterOutlet(routerOutlet);\n    });\n  }\n\n  async setupRouterOutlet(routerOutlet) {\n    const canStart = () => {\n      const config = getConfig();\n      const swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n\n      if (swipeEnabled) {\n        const {\n          view\n        } = this.state.viewStacks.findViewInfoById(this.activeIonPageId);\n        return !!(view && view.prevId);\n      } else {\n        return false;\n      }\n    };\n\n    const onStart = () => {\n      this.navigateBack();\n    };\n\n    routerOutlet.swipeHandler = {\n      canStart,\n      onStart,\n      onEnd: _shouldContinue => true\n    };\n  }\n\n  removeViewStack(stack) {\n    const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n    viewStacks.delete(stack);\n    this.setState({\n      viewStacks\n    });\n  }\n\n  syncView(page, viewId) {\n    const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n    const {\n      view\n    } = viewStacks.findViewInfoById(viewId);\n\n    if (view) {\n      view.isIonRoute = true;\n      this.ionPageElements[view.id] = page;\n      this.setActiveView(this.state.location || this.props.location, this.state.action, viewStacks);\n    }\n  }\n\n  syncRoute(routerOutlet) {\n    const ionRouterOutlet = React.Children.only(routerOutlet);\n    React.Children.forEach(ionRouterOutlet.props.children, child => {\n      for (const routeKey in this.routes) {\n        const route = this.routes[routeKey];\n\n        if ((route.props.path || route.props.from) === (child.props.path || child.props.from) && route.props.exact === child.props.exact && route.props.to === child.props.to) {\n          this.routes[routeKey] = child;\n        }\n      }\n    });\n  }\n\n  async commitView(enteringEl, leavingEl, ionRouterOutlet, direction, showGoBack, leavingViewHtml) {\n    if (!this.firstRender) {\n      if (!('componentOnReady' in ionRouterOutlet)) {\n        await waitUntilRouterOutletReady(ionRouterOutlet);\n      }\n\n      if (enteringEl === leavingEl && direction && leavingViewHtml) {\n        // If a page is transitioning to another version of itself\n        // we clone it so we can have an animation to show\n        const newLeavingElement = clonePageElement(leavingViewHtml);\n        ionRouterOutlet.appendChild(newLeavingElement);\n        await ionRouterOutlet.commit(enteringEl, newLeavingElement, {\n          deepWait: true,\n          duration: direction === undefined ? 0 : undefined,\n          direction,\n          showGoBack,\n          progressAnimation: false\n        });\n        ionRouterOutlet.removeChild(newLeavingElement);\n      } else {\n        await ionRouterOutlet.commit(enteringEl, leavingEl, {\n          deepWait: true,\n          duration: direction === undefined ? 0 : undefined,\n          direction,\n          showGoBack,\n          progressAnimation: false\n        });\n      }\n\n      if (leavingEl && enteringEl !== leavingEl) {\n        /** add hidden attributes */\n        leavingEl.classList.add('ion-page-hidden');\n        leavingEl.setAttribute('aria-hidden', 'true');\n      }\n    } else {\n      enteringEl.classList.remove('ion-page-invisible');\n      enteringEl.style.zIndex = '101';\n      enteringEl.dispatchEvent(new Event('ionViewWillEnter'));\n      enteringEl.dispatchEvent(new Event('ionViewDidEnter'));\n      this.firstRender = false;\n    }\n  }\n\n  handleNavigate(ionRouteAction, path, direction) {\n    this.currentIonRouteAction = ionRouteAction;\n\n    switch (ionRouteAction) {\n      case 'push':\n        this.currentRouteDirection = direction;\n        this.props.history.push(path);\n        break;\n\n      case 'pop':\n        this.currentRouteDirection = direction || 'back';\n        this.props.history.replace(path);\n        break;\n\n      case 'replace':\n        this.currentRouteDirection = 'none';\n        this.props.history.replace(path);\n        break;\n    }\n  }\n\n  navigateBack(defaultHref) {\n    const {\n      view: leavingView\n    } = this.state.viewStacks.findViewInfoById(this.activeIonPageId);\n\n    if (leavingView) {\n      if (leavingView.id === leavingView.prevId) {\n        const previousLocation = this.locationHistory.previous();\n\n        if (previousLocation) {\n          this.handleNavigate('pop', previousLocation.pathname + previousLocation.search);\n        } else {\n          defaultHref && this.handleNavigate('pop', defaultHref);\n        }\n      } else {\n        const {\n          view: enteringView\n        } = this.state.viewStacks.findViewInfoById(leavingView.prevId);\n\n        if (enteringView) {\n          const lastLocation = this.locationHistory.findLastLocationByUrl(enteringView.routeData.match.url);\n\n          if (lastLocation) {\n            this.handleNavigate('pop', lastLocation.pathname + lastLocation.search);\n          } else {\n            this.handleNavigate('pop', enteringView.routeData.match.url);\n          }\n        } else {\n          const currentLocation = this.locationHistory.previous();\n\n          if (currentLocation) {\n            this.handleNavigate('pop', currentLocation.pathname + currentLocation.search);\n          } else {\n            if (defaultHref) {\n              this.handleNavigate('pop', defaultHref);\n            }\n          }\n        }\n      }\n    } else {\n      if (defaultHref) {\n        this.handleNavigate('replace', defaultHref, 'back');\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(RouteManagerContext.Provider, {\n      value: this.state\n    }, React.createElement(NavManager, Object.assign({}, this.props, {\n      onNavigateBack: this.navigateBack,\n      onNavigate: this.handleNavigate\n    }), this.props.children));\n  }\n\n}\n\nfunction clonePageElement(leavingViewHtml) {\n  const newEl = document.createElement('div');\n  newEl.innerHTML = leavingViewHtml;\n  newEl.classList.add('ion-page-hidden');\n  newEl.style.zIndex = ''; // Remove an existing back button so the new element doesn't get two of them\n\n  const ionBackButton = newEl.getElementsByTagName('ion-back-button');\n\n  if (ionBackButton[0]) {\n    ionBackButton[0].innerHTML = '';\n  }\n\n  return newEl.firstChild;\n}\n\nasync function waitUntilRouterOutletReady(ionRouterOutlet) {\n  if ('componentOnReady' in ionRouterOutlet) {\n    return;\n  } else {\n    setTimeout(() => {\n      waitUntilRouterOutletReady(ionRouterOutlet);\n    }, 0);\n  }\n}\n\nconst RouteManagerWithRouter = withRouter(RouteManager);\nRouteManagerWithRouter.displayName = 'RouteManager';\n\nclass IonReactRouter extends React.Component {\n  render() {\n    const _a = this.props,\n          {\n      children\n    } = _a,\n          props = __rest(_a, [\"children\"]);\n\n    return React.createElement(BrowserRouter, Object.assign({}, props), React.createElement(RouteManagerWithRouter, null, children));\n  }\n\n}\n\nclass IonReactHashRouter extends React.Component {\n  render() {\n    const _a = this.props,\n          {\n      children\n    } = _a,\n          props = __rest(_a, [\"children\"]);\n\n    return React.createElement(HashRouter, Object.assign({}, props), React.createElement(RouteManagerWithRouter, null, children));\n  }\n\n}\n\nclass IonReactMemoryRouter extends React.Component {\n  render() {\n    const _a = this.props,\n          {\n      children,\n      history\n    } = _a,\n          props = __rest(_a, [\"children\", \"history\"]);\n\n    const match = matchPath$1(history.location.pathname, this.props);\n    return React.createElement(MemoryRouter, Object.assign({}, props), React.createElement(RouteManager, {\n      history: history,\n      location: history.location,\n      match: match\n    }, children));\n  }\n\n}\n\nexport { IonReactHashRouter, IonReactMemoryRouter, IonReactRouter };","map":{"version":3,"sources":["../src/utils/generateId.ts","../src/utils/dev.ts","../src/utils/LocationHistory.ts","../src/ReactRouter/ViewStacks.ts","../src/ReactRouter/RouteManagerContext.ts","../src/ReactRouter/View.tsx","../src/ReactRouter/ViewTransitionManager.tsx","../src/ReactRouter/StackManager.tsx","../src/ReactRouter/NavManager.tsx","../src/ReactRouter/Router.tsx","../src/ReactRouter/IonReactRouter.tsx","../src/ReactRouter/IonReactHashRouter.tsx","../src/ReactRouter/IonReactMemoryRouter.tsx"],"names":["matchPath"],"mappings":"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","sourcesContent":["let count = 0;\n\nexport const generateId = () => (count++).toString();\n","export const isDevMode = () => {\n  return process && process.env && process.env.NODE_ENV === 'development';\n};\n\nexport const deprecationWarning = (message: string) => {\n  if (isDevMode()) {\n    console.warn(message);\n  }\n};\n","import { Location as HistoryLocation } from 'history';\n\nconst RESTRICT_SIZE = 25;\n\nexport class LocationHistory {\n  private locationHistory: HistoryLocation[] = [];\n\n  add(location: HistoryLocation) {\n    this.locationHistory.push(location);\n    if (this.locationHistory.length > RESTRICT_SIZE) {\n      this.locationHistory.splice(0, 10);\n    }\n  }\n\n  pop() {\n    this.locationHistory.pop();\n  }\n\n  replace(location: HistoryLocation) {\n    this.locationHistory.pop();\n    this.locationHistory.push(location);\n  }\n\n  clear() {\n    this.locationHistory = [];\n  }\n\n  findLastLocationByUrl(url: string) {\n    for (let i = this.locationHistory.length - 1; i >= 0; i--) {\n      const location = this.locationHistory[i];\n      if (location.pathname.toLocaleLowerCase() === url.toLocaleLowerCase()) {\n        return location;\n      }\n    }\n    return undefined;\n  }\n\n  previous() {\n    return this.locationHistory[this.locationHistory.length - 2];\n  }\n\n  current() {\n    return this.locationHistory[this.locationHistory.length - 1];\n  }\n}\n","import { Location as HistoryLocation } from 'history';\nimport { matchPath } from 'react-router-dom';\n\nimport { IonRouteData } from './IonRouteData';\nimport { ViewItem } from './ViewItem';\n\nexport interface ViewStack {\n  id: string;\n  views: ViewItem[];\n}\n\n/**\n * The holistic view of all the Routes configured for an application inside of an IonRouterOutlet.\n */\nexport class ViewStacks {\n  private viewStacks: { [key: string]: ViewStack | undefined; } = {};\n\n  get(key: string) {\n    return this.viewStacks[key];\n  }\n\n  set(key: string, viewStack: ViewStack) {\n    this.viewStacks[key] = viewStack;\n  }\n\n  getKeys() {\n    return Object.keys(this.viewStacks);\n  }\n\n  delete(key: string) {\n    delete this.viewStacks[key];\n  }\n\n  findViewInfoByLocation(location: HistoryLocation, viewKey: string) {\n    let view: ViewItem<IonRouteData> | undefined;\n    let match: IonRouteData['match'] | null | undefined;\n    let viewStack: ViewStack | undefined;\n\n    viewStack = this.viewStacks[viewKey];\n    if (viewStack) {\n      viewStack.views.some(matchView);\n\n      if (!view) {\n        viewStack.views.some(r => {\n          // try to find a route that doesn't have a path or from prop, that will be our not found route\n          if (!r.routeData.childProps.path && !r.routeData.childProps.from) {\n            match = {\n              path: location.pathname,\n              url: location.pathname,\n              isExact: true,\n              params: {}\n            };\n            view = r;\n            return true;\n          }\n          return false;\n        });\n      }\n    }\n\n    return { view, viewStack, match };\n\n    function matchView(v: ViewItem) {\n      const matchProps = {\n        exact: v.routeData.childProps.exact,\n        path: v.routeData.childProps.path || v.routeData.childProps.from,\n        component: v.routeData.childProps.component\n      };\n      const myMatch: IonRouteData['match'] | null | undefined = matchPath(location.pathname, matchProps);\n      if (myMatch) {\n        view = v;\n        match = myMatch;\n        return true;\n      }\n      return false;\n    }\n\n  }\n\n  findViewInfoById(id = '') {\n    let view: ViewItem<IonRouteData> | undefined;\n    let viewStack: ViewStack | undefined;\n    const keys = this.getKeys();\n    keys.some(key => {\n      const vs = this.viewStacks[key];\n      view = vs!.views.find(x => x.id === id);\n      if (view) {\n        viewStack = vs;\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return { view, viewStack };\n  }\n\n}\n","import React, { ReactNode } from 'react';\n\nimport { ViewStacks } from './ViewStacks';\n\nexport interface RouteManagerContextState {\n  syncView: (page: HTMLElement, viewId: string) => void;\n  syncRoute: (route: any) => void;\n  hideView: (viewId: string) => void;\n  viewStacks: ViewStacks;\n  setupIonRouter: (id: string, children: ReactNode, routerOutlet: HTMLIonRouterOutletElement) => void;\n  removeViewStack: (stack: string) => void;\n  getRoute: (id: string) => any;\n}\n\nexport const RouteManagerContext = /*@__PURE__*/React.createContext<RouteManagerContextState>({\n  viewStacks: new ViewStacks(),\n  syncView: () => { navContextNotFoundError(); },\n  syncRoute: () => { navContextNotFoundError(); },\n  hideView: () => { navContextNotFoundError(); },\n  setupIonRouter: () => Promise.reject(navContextNotFoundError()),\n  removeViewStack: () => { navContextNotFoundError(); },\n  getRoute: () => { navContextNotFoundError(); }\n});\n\nfunction navContextNotFoundError() {\n  console.error('IonReactRouter not found, did you add it to the app?');\n}\n","import { IonLifeCycleContext, NavContext } from '@ionic/react';\nimport React from 'react';\nimport { Redirect } from 'react-router';\n\nimport { isDevMode } from '../utils';\n\nimport { ViewItem } from './ViewItem';\n\ninterface ViewProps extends React.HTMLAttributes<HTMLElement> {\n  onViewSync: (page: HTMLElement, viewId: string) => void;\n  onHideView: (viewId: string) => void;\n  view: ViewItem;\n  route: any;\n}\n\n/**\n * The View component helps manage the IonPage's lifecycle and registration\n */\nexport class View extends React.Component<ViewProps, {}> {\n  context!: React.ContextType<typeof IonLifeCycleContext>;\n  ionPage?: HTMLElement;\n\n  componentDidMount() {\n    /**\n     * If we can tell if view is a redirect, hide it so it will work again in future\n     */\n    const { view, route } = this.props;\n    if (route.type === Redirect) {\n      this.props.onHideView(view.id);\n    } else if (route.props.render && !view.isIonRoute) {\n      // Test the render to see if it returns a redirect\n      if (route.props.render().type === Redirect) {\n        this.props.onHideView(view.id);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.ionPage) {\n      this.ionPage.removeEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n      this.ionPage.removeEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n      this.ionPage.removeEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n      this.ionPage.removeEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n    }\n  }\n\n  ionViewWillEnterHandler() {\n    this.context.ionViewWillEnter();\n  }\n\n  ionViewDidEnterHandler() {\n    this.context.ionViewDidEnter();\n  }\n\n  ionViewWillLeaveHandler() {\n    this.context.ionViewWillLeave();\n  }\n\n  ionViewDidLeaveHandler() {\n    this.context.ionViewDidLeave();\n  }\n\n  registerIonPage(page: HTMLElement) {\n    this.ionPage = page;\n    this.ionPage.addEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n    this.ionPage.addEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n    this.ionPage.addEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n    this.ionPage.addEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n    this.ionPage.classList.add('ion-page-invisible');\n    if (isDevMode()) {\n      this.ionPage.setAttribute('data-view-id', this.props.view.id);\n    }\n    this.props.onViewSync(page, this.props.view.id);\n  }\n\n  render() {\n    return (\n      <NavContext.Consumer>\n        {value => {\n          const newProvider = {\n            ...value,\n            registerIonPage: this.registerIonPage.bind(this)\n          };\n\n          return (\n            <NavContext.Provider value={newProvider}>\n              {this.props.children}\n            </NavContext.Provider>\n          );\n\n        }}\n      </NavContext.Consumer>\n    );\n  }\n\n  static get contextType() {\n    return IonLifeCycleContext;\n  }\n}\n","import { DefaultIonLifeCycleContext, IonLifeCycleContext } from '@ionic/react';\nimport React from 'react';\n\nimport { RouteManagerContext } from './RouteManagerContext';\n\ninterface ViewTransitionManagerProps {\n  id: string;\n  mount: boolean;\n}\n\ninterface ViewTransitionManagerState {\n  show: boolean;\n}\n\n/**\n * Manages the View's DOM lifetime by keeping it around long enough to complete page transitions before removing it.\n */\nexport class ViewTransitionManager extends React.Component<ViewTransitionManagerProps, ViewTransitionManagerState> {\n  ionLifeCycleContext = new DefaultIonLifeCycleContext();\n  _isMounted = false;\n  context!: React.ContextType<typeof RouteManagerContext>;\n\n  constructor(props: ViewTransitionManagerProps) {\n    super(props);\n    this.state = {\n      show: true\n    };\n\n    this.ionLifeCycleContext.onComponentCanBeDestroyed(() => {\n      if (!this.props.mount) {\n        if (this._isMounted) {\n          this.setState({\n            show: false\n          }, () => {\n            this.context.hideView(this.props.id);\n          });\n        }\n      }\n    });\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  render() {\n    const { show } = this.state;\n    return (\n      <IonLifeCycleContext.Provider value={this.ionLifeCycleContext}>\n        {show && this.props.children}\n      </IonLifeCycleContext.Provider>\n    );\n  }\n\n  static get contextType() {\n    return RouteManagerContext;\n  }\n}\n","import React from 'react';\n\nimport { generateId, isDevMode } from '../utils';\n\nimport { RouteManagerContext, RouteManagerContextState } from './RouteManagerContext';\nimport { View } from './View';\nimport { ViewItem } from './ViewItem';\nimport { ViewTransitionManager } from './ViewTransitionManager';\n\ninterface StackManagerProps {\n  id?: string;\n  routeManager: RouteManagerContextState;\n  children?: React.ReactNode;\n}\n\ninterface StackManagerState { }\n\nclass StackManagerInner extends React.Component<StackManagerProps, StackManagerState> {\n  routerOutletEl: React.RefObject<HTMLIonRouterOutletElement> = React.createRef();\n  id: string;\n\n  constructor(props: StackManagerProps) {\n    super(props);\n    this.id = this.props.id || generateId();\n    this.handleViewSync = this.handleViewSync.bind(this);\n    this.handleHideView = this.handleHideView.bind(this);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.props.routeManager.setupIonRouter(this.id, this.props.children, this.routerOutletEl.current!);\n  }\n\n  static getDerivedStateFromProps(props: StackManagerProps, state: StackManagerState) {\n    props.routeManager.syncRoute(props.children);\n    return state;\n  }\n\n  componentWillUnmount() {\n    this.props.routeManager.removeViewStack(this.id);\n  }\n\n  handleViewSync(page: HTMLElement, viewId: string) {\n    this.props.routeManager.syncView(page, viewId);\n  }\n\n  handleHideView(viewId: string) {\n    this.props.routeManager.hideView(viewId);\n  }\n\n  renderChild(item: ViewItem, route: any) {\n    const component = React.cloneElement(route, {\n      computedMatch: item.routeData.match\n    });\n    return component;\n  }\n\n  render() {\n    const routeManager = this.props.routeManager;\n    const viewStack = routeManager.viewStacks.get(this.id);\n    const views = (viewStack || { views: [] }).views.filter(x => x.show);\n    const ionRouterOutlet = React.Children.only(this.props.children) as React.ReactElement;\n    const childElements = views.map(view => {\n      const route = routeManager.getRoute(view.routeId);\n      return (\n        <ViewTransitionManager\n          id={view.id}\n          key={view.key}\n          mount={view.mount}\n        >\n          <View\n            onViewSync={this.handleViewSync}\n            onHideView={this.handleHideView}\n            view={view}\n            route={route}\n          >\n            {this.renderChild(view, route)}\n          </View>\n        </ViewTransitionManager>\n      );\n    });\n\n    const elementProps: any = {\n      ref: this.routerOutletEl\n    };\n\n    if (ionRouterOutlet.props.forwardedRef) {\n      ionRouterOutlet.props.forwardedRef.current = this.routerOutletEl;\n    }\n\n    if (isDevMode()) {\n      elementProps['data-stack-id'] = this.id;\n    }\n\n    const routerOutletChild = React.cloneElement(ionRouterOutlet, elementProps, childElements);\n\n    return routerOutletChild;\n  }\n}\n\nconst withContext = (Component: any) => {\n  return (props: any) => (\n    <RouteManagerContext.Consumer>\n      {context => <Component {...props} routeManager={context} />}\n    </RouteManagerContext.Consumer>\n  );\n};\n\nexport const StackManager = withContext(StackManagerInner);\n","import { RouterDirection } from '@ionic/core';\nimport { NavContext, NavContextState } from '@ionic/react';\nimport { Location as HistoryLocation, UnregisterCallback } from 'history';\nimport React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\n\nimport { IonRouteAction } from './IonRouteAction';\nimport { StackManager } from './StackManager';\n\ninterface NavManagerProps extends RouteComponentProps {\n  onNavigateBack: (defaultHref?: string) => void;\n  onNavigate: (ionRouteAction: IonRouteAction, path: string, state?: any) => void;\n}\n\nexport class NavManager extends React.Component<NavManagerProps, NavContextState> {\n\n  listenUnregisterCallback: UnregisterCallback | undefined;\n\n  constructor(props: NavManagerProps) {\n    super(props);\n    this.state = {\n      goBack: this.goBack.bind(this),\n      hasIonicRouter: () => true,\n      navigate: this.navigate.bind(this),\n      getStackManager: this.getStackManager.bind(this),\n      getPageManager: this.getPageManager.bind(this),\n      currentPath: this.props.location.pathname,\n      registerIonPage: () => { return; } // overridden in View for each IonPage\n    };\n\n    this.listenUnregisterCallback = this.props.history.listen((location: HistoryLocation) => {\n      this.setState({\n        currentPath: location.pathname\n      });\n    });\n\n    if (document) {\n      document.addEventListener('ionBackButton', (e: any) => {\n        e.detail.register(0, () => {\n          this.props.history.goBack();\n        });\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.listenUnregisterCallback) {\n      this.listenUnregisterCallback();\n    }\n  }\n\n  goBack(defaultHref?: string) {\n    this.props.onNavigateBack(defaultHref);\n  }\n\n  navigate(path: string, direction?: RouterDirection | 'none', ionRouteAction: IonRouteAction = 'push') {\n    this.props.onNavigate(ionRouteAction, path, direction);\n  }\n\n  getPageManager() {\n    return (children: any) => children;\n  }\n\n  getStackManager() {\n    return StackManager;\n  }\n\n  render() {\n    return (\n      <NavContext.Provider value={this.state}>\n        {this.props.children}\n      </NavContext.Provider>\n    );\n  }\n\n}\n","import { NavDirection } from '@ionic/core';\nimport { RouterDirection, getConfig } from '@ionic/react';\nimport { Action as HistoryAction, Location as HistoryLocation, UnregisterCallback } from 'history';\nimport React from 'react';\nimport { RouteComponentProps, matchPath, withRouter } from 'react-router-dom';\n\nimport { generateId, isDevMode } from '../utils';\nimport { LocationHistory } from '../utils/LocationHistory';\n\nimport { IonRouteAction } from './IonRouteAction';\nimport { IonRouteData } from './IonRouteData';\nimport { NavManager } from './NavManager';\nimport { RouteManagerContext, RouteManagerContextState } from './RouteManagerContext';\nimport { ViewItem } from './ViewItem';\nimport { ViewStack, ViewStacks } from './ViewStacks';\n\nexport interface LocationState {\n  direction?: RouterDirection;\n  action?: IonRouteAction;\n}\n\ninterface RouteManagerProps extends RouteComponentProps<{}, {}, LocationState> {\n  location: HistoryLocation<LocationState>;\n}\n\ninterface RouteManagerState extends RouteManagerContextState {\n  location?: HistoryLocation<LocationState>;\n  action?: IonRouteAction;\n}\n\nexport class RouteManager extends React.Component<RouteManagerProps, RouteManagerState> {\n  listenUnregisterCallback: UnregisterCallback | undefined;\n  activeIonPageId?: string;\n  currentIonRouteAction?: IonRouteAction;\n  currentRouteDirection?: RouterDirection;\n  locationHistory = new LocationHistory();\n  routes: { [key: string]: React.ReactElement<any>; } = {};\n  ionPageElements: { [key: string]: HTMLElement; } = {};\n  routerOutlets: { [key: string]: HTMLIonRouterOutletElement; } = {};\n  firstRender = true;\n\n  constructor(props: RouteManagerProps) {\n    super(props);\n    this.listenUnregisterCallback = this.props.history.listen(this.historyChange.bind(this));\n    this.handleNavigate = this.handleNavigate.bind(this);\n    this.navigateBack = this.navigateBack.bind(this);\n    this.state = {\n      viewStacks: new ViewStacks(),\n      hideView: this.hideView.bind(this),\n      setupIonRouter: this.setupIonRouter.bind(this),\n      removeViewStack: this.removeViewStack.bind(this),\n      syncView: this.syncView.bind(this),\n      syncRoute: this.syncRoute.bind(this),\n      getRoute: this.getRoute.bind(this)\n    };\n\n    this.locationHistory.add({\n      hash: window.location.hash,\n      key: generateId(),\n      pathname: window.location.pathname,\n      search: window.location.search,\n      state: {}\n    });\n  }\n\n  componentDidUpdate(_prevProps: RouteComponentProps, prevState: RouteManagerState) {\n    // Trigger a page change if the location or action is different\n    if (this.state.location && prevState.location !== this.state.location || prevState.action !== this.state.action) {\n      const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n      this.setActiveView(this.state.location!, this.state.action!, viewStacks);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.listenUnregisterCallback) {\n      this.listenUnregisterCallback();\n    }\n  }\n\n  getRoute(id: string) {\n    return this.routes[id];\n  }\n\n  hideView(viewId: string) {\n    const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n    const { view } = viewStacks.findViewInfoById(viewId);\n    if (view) {\n      view.show = false;\n      view.isIonRoute = false;\n      view.prevId = undefined;\n      view.key = generateId();\n      delete this.ionPageElements[view.id];\n      this.setState({\n        viewStacks\n      });\n    }\n  }\n\n  historyChange(location: HistoryLocation<LocationState>, action: HistoryAction) {\n    const ionRouteAction = this.currentIonRouteAction === 'pop' ? 'pop' : action.toLowerCase() as IonRouteAction;\n    let direction = this.currentRouteDirection;\n\n    if (ionRouteAction === 'push') {\n      this.locationHistory.add(location);\n    } else if (ionRouteAction === 'pop') {\n      this.locationHistory.pop();\n      direction = direction || 'back';\n    } else if (ionRouteAction === 'replace') {\n      this.locationHistory.replace(location);\n      direction = 'none';\n    }\n\n    if (direction === 'root') {\n      this.locationHistory.clear();\n      this.locationHistory.add(location);\n    }\n\n    location.state = location.state || { direction };\n    this.setState({\n      location,\n      action: ionRouteAction as IonRouteAction\n    });\n    this.currentRouteDirection = undefined;\n    this.currentIonRouteAction = undefined;\n  }\n\n  setActiveView(location: HistoryLocation<LocationState>, action: IonRouteAction, viewStacks: ViewStacks) {\n    let direction: RouterDirection | undefined = (location.state && location.state.direction) || 'forward';\n    let leavingView: ViewItem | undefined;\n    const viewStackKeys = viewStacks.getKeys();\n    let shouldTransitionPage = false;\n    let leavingViewHtml: string | undefined;\n\n    viewStackKeys.forEach(key => {\n      const { view: enteringView, viewStack: enteringViewStack, match } = viewStacks.findViewInfoByLocation(location, key);\n      if (!enteringView || !enteringViewStack) {\n        return;\n      }\n\n      leavingView = viewStacks.findViewInfoById(this.activeIonPageId).view;\n\n      if (enteringView.isIonRoute) {\n        enteringView.show = true;\n        enteringView.mount = true;\n        enteringView.routeData.match = match!;\n        shouldTransitionPage = true;\n\n        this.activeIonPageId = enteringView.id;\n\n        if (leavingView) {\n          if (action === 'push' && direction === 'forward') {\n            /**\n             * If the page is being pushed into the stack by another view,\n             * record the view that originally directed to the new view for back button purposes.\n             */\n            enteringView.prevId = leavingView.id;\n          } else if (direction !== 'none') {\n            leavingView.mount = false;\n            this.removeOrphanedViews(enteringView, enteringViewStack);\n          }\n\n          leavingViewHtml = enteringView.id === leavingView.id ? this.ionPageElements[leavingView.id].outerHTML : undefined;\n        } else {\n          // If there is not a leavingView, then we shouldn't provide a direction\n          direction = undefined;\n        }\n\n      } else {\n        enteringView.show = true;\n        enteringView.mount = true;\n        enteringView.routeData.match = match!;\n      }\n\n    });\n\n    if (leavingView) {\n      if (!leavingView.isIonRoute) {\n        leavingView.mount = false;\n        leavingView.show = false;\n      }\n    }\n\n    this.setState({\n      viewStacks\n    }, () => {\n      if (shouldTransitionPage) {\n        const { view: enteringView, viewStack } = this.state.viewStacks.findViewInfoById(this.activeIonPageId);\n        if (enteringView && viewStack) {\n          const enteringEl = this.ionPageElements[enteringView.id];\n          const leavingEl = leavingView && this.ionPageElements[leavingView.id];\n          if (enteringEl) {\n            let navDirection: NavDirection | undefined;\n            if (leavingEl && leavingEl.innerHTML === '') {\n              // Don't animate from an empty view\n              navDirection = undefined;\n            } else if (direction === 'none' || direction === 'root') {\n              navDirection = undefined;\n            } else {\n              navDirection = direction;\n            }\n            const shouldGoBack = !!enteringView.prevId;\n            const routerOutlet = this.routerOutlets[viewStack.id];\n            this.commitView(\n              enteringEl!,\n              leavingEl!,\n              routerOutlet,\n              navDirection,\n              shouldGoBack,\n              leavingViewHtml);\n          } else if (leavingEl) {\n            leavingEl.classList.add('ion-page-hidden');\n            leavingEl.setAttribute('aria-hidden', 'true');\n          }\n        }\n\n        // Warn if an IonPage was not eventually rendered in Dev Mode\n        if (isDevMode()) {\n          if (enteringView && enteringView.routeData.match!.url !== location.pathname) {\n            setTimeout(() => {\n              const { view } = this.state.viewStacks.findViewInfoById(this.activeIonPageId);\n              if (view!.routeData.match!.url !== location.pathname) {\n                console.warn('No IonPage was found to render. Make sure you wrap your page with an IonPage component.');\n              }\n            }, 100);\n          }\n        }\n      }\n    });\n  }\n\n  removeOrphanedViews(view: ViewItem, viewStack: ViewStack) {\n    // Note: This technique is a bit wonky for views that reference each other and get into a circular loop.\n    // It can still remove a view that probably shouldn't be.\n    const viewsToRemove = viewStack.views.filter(v => v.prevId === view.id);\n    viewsToRemove.forEach(v => {\n      // Don't remove if view is currently active\n      if (v.id !== this.activeIonPageId) {\n        this.removeOrphanedViews(v, viewStack);\n\n        // If view is not currently visible, go ahead and remove it from DOM\n        const page = this.ionPageElements[v.id];\n        if (page.classList.contains('ion-page-hidden')) {\n          v.show = false;\n          v.isIonRoute = false;\n          v.prevId = undefined;\n          v.key = generateId();\n          delete this.ionPageElements[v.id];\n        }\n        v.mount = false;\n      }\n    });\n  }\n\n  setupIonRouter(id: string, children: any, routerOutlet: HTMLIonRouterOutletElement) {\n    const views: ViewItem[] = [];\n    let activeId: string | undefined;\n    const ionRouterOutlet = React.Children.only(children) as React.ReactElement;\n    let foundMatch = false;\n    React.Children.forEach(ionRouterOutlet.props.children, (child: React.ReactElement) => {\n      const routeId = generateId();\n      this.routes[routeId] = child;\n      views.push(createViewItem(child, routeId, this.props.history.location));\n    });\n\n    if (!foundMatch) {\n      const notFoundRoute = views.find(r => {\n        // try to find a route that doesn't have a path or from prop, that will be our not found route\n        return !r.routeData.childProps.path && !r.routeData.childProps.from;\n      });\n      if (notFoundRoute) {\n        notFoundRoute.show = true;\n      }\n    }\n\n    this.registerViewStack(id, activeId, views, routerOutlet, this.props.location);\n\n    function createViewItem(child: React.ReactElement<any>, routeId: string, location: HistoryLocation) {\n      const viewId = generateId();\n      const key = generateId();\n\n      // const route = child;\n      const matchProps = {\n        exact: child.props.exact,\n        path: child.props.path || child.props.from,\n        component: child.props.component\n      };\n      const match: IonRouteData['match'] = matchPath(location.pathname, matchProps);\n      const view: ViewItem<IonRouteData> = {\n        id: viewId,\n        key,\n        routeData: {\n          match,\n          childProps: child.props\n        },\n        routeId,\n        mount: true,\n        show: !!match,\n        isIonRoute: false\n      };\n      if (match && view.isIonRoute) {\n        activeId = viewId;\n      }\n      if (!foundMatch && match) {\n        foundMatch = true;\n      }\n      return view;\n    }\n  }\n\n  registerViewStack(stack: string, activeId: string | undefined, stackItems: ViewItem[], routerOutlet: HTMLIonRouterOutletElement, _location: HistoryLocation) {\n    this.setState(prevState => {\n      const prevViewStacks = Object.assign(new ViewStacks(), prevState.viewStacks);\n      const newStack: ViewStack = {\n        id: stack,\n        views: stackItems\n      };\n      this.routerOutlets[stack] = routerOutlet;\n      if (activeId) {\n        this.activeIonPageId = activeId;\n      }\n      prevViewStacks.set(stack, newStack);\n      return {\n        viewStacks: prevViewStacks\n      };\n    }, () => {\n      this.setupRouterOutlet(routerOutlet);\n    });\n  }\n\n  async setupRouterOutlet(routerOutlet: HTMLIonRouterOutletElement) {\n\n    const canStart = () => {\n      const config = getConfig();\n      const swipeEnabled = config && config.get('swipeBackEnabled', routerOutlet.mode === 'ios');\n      if (swipeEnabled) {\n        const { view } = this.state.viewStacks.findViewInfoById(this.activeIonPageId);\n        return !!(view && view.prevId);\n      } else {\n        return false;\n      }\n    };\n\n    const onStart = () => {\n      this.navigateBack();\n    };\n    routerOutlet.swipeHandler = {\n      canStart,\n      onStart,\n      onEnd: _shouldContinue => true\n    };\n  }\n\n  removeViewStack(stack: string) {\n    const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n    viewStacks.delete(stack);\n    this.setState({\n      viewStacks\n    });\n  }\n\n  syncView(page: HTMLElement, viewId: string) {\n    const viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n    const { view } = viewStacks.findViewInfoById(viewId);\n    if (view) {\n      view.isIonRoute = true;\n      this.ionPageElements[view.id] = page;\n      this.setActiveView(this.state.location || this.props.location, this.state.action!, viewStacks);\n    }\n  }\n\n  syncRoute(routerOutlet: any) {\n    const ionRouterOutlet = React.Children.only(routerOutlet) as React.ReactElement;\n\n    React.Children.forEach(ionRouterOutlet.props.children, (child: React.ReactElement) => {\n      for (const routeKey in this.routes) {\n        const route = this.routes[routeKey];\n        if (\n          ((route.props.path || route.props.from) === (child.props.path || child.props.from)) &&\n          (route.props.exact === child.props.exact) &&\n          (route.props.to === child.props.to)\n        ) {\n          this.routes[routeKey] = child;\n        }\n      }\n    });\n  }\n\n  private async commitView(enteringEl: HTMLElement, leavingEl: HTMLElement, ionRouterOutlet: HTMLIonRouterOutletElement, direction?: NavDirection, showGoBack?: boolean, leavingViewHtml?: string) {\n    if (!this.firstRender) {\n\n      if (!('componentOnReady' in ionRouterOutlet)) {\n        await waitUntilRouterOutletReady(ionRouterOutlet);\n      }\n\n      if ((enteringEl === leavingEl) && direction && leavingViewHtml) {\n        // If a page is transitioning to another version of itself\n        // we clone it so we can have an animation to show\n        const newLeavingElement = clonePageElement(leavingViewHtml);\n        ionRouterOutlet.appendChild(newLeavingElement);\n        await ionRouterOutlet.commit(enteringEl, newLeavingElement, {\n          deepWait: true,\n          duration: direction === undefined ? 0 : undefined,\n          direction,\n          showGoBack,\n          progressAnimation: false\n        });\n        ionRouterOutlet.removeChild(newLeavingElement);\n      } else {\n        await ionRouterOutlet.commit(enteringEl, leavingEl, {\n          deepWait: true,\n          duration: direction === undefined ? 0 : undefined,\n          direction,\n          showGoBack,\n          progressAnimation: false\n        });\n      }\n\n      if (leavingEl && (enteringEl !== leavingEl)) {\n        /** add hidden attributes */\n        leavingEl.classList.add('ion-page-hidden');\n        leavingEl.setAttribute('aria-hidden', 'true');\n      }\n    } else {\n      enteringEl.classList.remove('ion-page-invisible');\n      enteringEl.style.zIndex = '101';\n      enteringEl.dispatchEvent(new Event('ionViewWillEnter'));\n      enteringEl.dispatchEvent(new Event('ionViewDidEnter'));\n      this.firstRender = false;\n    }\n  }\n\n  handleNavigate(ionRouteAction: IonRouteAction, path: string, direction?: RouterDirection) {\n    this.currentIonRouteAction = ionRouteAction;\n    switch (ionRouteAction) {\n      case 'push':\n        this.currentRouteDirection = direction;\n        this.props.history.push(path);\n        break;\n      case 'pop':\n        this.currentRouteDirection = direction || 'back';\n        this.props.history.replace(path);\n        break;\n      case 'replace':\n        this.currentRouteDirection = 'none';\n        this.props.history.replace(path);\n        break;\n    }\n  }\n\n  navigateBack(defaultHref?: string) {\n    const { view: leavingView } = this.state.viewStacks.findViewInfoById(this.activeIonPageId);\n    if (leavingView) {\n      if (leavingView.id === leavingView.prevId) {\n        const previousLocation = this.locationHistory.previous();\n        if (previousLocation) {\n          this.handleNavigate('pop', previousLocation.pathname + previousLocation.search);\n        } else {\n          defaultHref && this.handleNavigate('pop', defaultHref);\n        }\n      } else {\n        const { view: enteringView } = this.state.viewStacks.findViewInfoById(leavingView.prevId);\n        if (enteringView) {\n          const lastLocation = this.locationHistory.findLastLocationByUrl(enteringView.routeData.match!.url);\n          if (lastLocation) {\n            this.handleNavigate('pop', lastLocation.pathname + lastLocation.search);\n          } else {\n            this.handleNavigate('pop', enteringView.routeData.match!.url);\n          }\n        } else {\n          const currentLocation = this.locationHistory.previous();\n          if (currentLocation) {\n            this.handleNavigate('pop', currentLocation.pathname + currentLocation.search);\n          } else {\n            if (defaultHref) {\n              this.handleNavigate('pop', defaultHref);\n            }\n          }\n        }\n      }\n    } else {\n      if (defaultHref) {\n        this.handleNavigate('replace', defaultHref, 'back');\n      }\n    }\n  }\n\n  render() {\n    return (\n      <RouteManagerContext.Provider value={this.state}>\n        <NavManager\n          {...this.props}\n          onNavigateBack={this.navigateBack}\n          onNavigate={this.handleNavigate}\n        >\n          {this.props.children}\n        </NavManager>\n      </RouteManagerContext.Provider>\n    );\n  }\n}\n\nfunction clonePageElement(leavingViewHtml: string) {\n  const newEl = document.createElement('div');\n  newEl.innerHTML = leavingViewHtml;\n  newEl.classList.add('ion-page-hidden');\n  newEl.style.zIndex = '';\n  // Remove an existing back button so the new element doesn't get two of them\n  const ionBackButton = newEl.getElementsByTagName('ion-back-button');\n  if (ionBackButton[0]) {\n    ionBackButton[0].innerHTML = '';\n  }\n  return newEl.firstChild as HTMLElement;\n}\n\nasync function waitUntilRouterOutletReady(ionRouterOutlet: HTMLIonRouterElement) {\n  if ('componentOnReady' in ionRouterOutlet) {\n    return;\n  } else {\n    setTimeout(() => {\n      waitUntilRouterOutletReady(ionRouterOutlet);\n    }, 0);\n  }\n}\n\nexport const RouteManagerWithRouter = withRouter(RouteManager);\nRouteManagerWithRouter.displayName = 'RouteManager';\n","import React from 'react';\nimport { BrowserRouter, BrowserRouterProps } from 'react-router-dom';\n\nimport { RouteManagerWithRouter } from './Router';\n\nexport class IonReactRouter extends React.Component<BrowserRouterProps> {\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <BrowserRouter {...props}>\n        <RouteManagerWithRouter>{children}</RouteManagerWithRouter>\n      </BrowserRouter>\n    );\n  }\n}\n","import React from 'react';\nimport { HashRouter, HashRouterProps } from 'react-router-dom';\n\nimport { RouteManagerWithRouter } from './Router';\n\nexport class IonReactHashRouter extends React.Component<HashRouterProps> {\n  render() {\n    const { children, ...props } = this.props;\n    return (\n      <HashRouter {...props}>\n        <RouteManagerWithRouter>{children}</RouteManagerWithRouter>\n      </HashRouter>\n    );\n  }\n}\n","import { MemoryHistory } from 'history';\nimport React from 'react';\nimport { MemoryRouter, MemoryRouterProps, matchPath } from 'react-router';\n\nimport { LocationState, RouteManager } from './Router';\n\ninterface IonReactMemoryRouterProps extends MemoryRouterProps {\n  history: MemoryHistory<LocationState>;\n}\n\nexport class IonReactMemoryRouter extends React.Component<IonReactMemoryRouterProps> {\n  render() {\n    const { children, history, ...props } = this.props;\n    const match = matchPath(history.location.pathname, this.props);\n    return (\n      <MemoryRouter {...props}>\n        <RouteManager history={history} location={history.location} match={match!}>{children}</RouteManager>\n      </MemoryRouter>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}