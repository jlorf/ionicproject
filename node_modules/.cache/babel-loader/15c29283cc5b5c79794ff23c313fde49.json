{"ast":null,"code":"import { r as registerInstance, d as createEvent, h, H as Host, e as getElement } from './index-2cd7e630.js';\nimport { b as getIonMode } from './ionic-global-a175fa73.js';\nconst imgCss = \":host{display:block;-o-object-fit:contain;object-fit:contain}img{display:block;width:100%;height:100%;-o-object-fit:inherit;object-fit:inherit;-o-object-position:inherit;object-position:inherit}\";\nconst Img = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n\n    this.onLoad = () => {\n      this.ionImgDidLoad.emit();\n    };\n\n    this.onError = () => {\n      this.ionError.emit();\n    };\n\n    this.ionImgWillLoad = createEvent(this, \"ionImgWillLoad\", 7);\n    this.ionImgDidLoad = createEvent(this, \"ionImgDidLoad\", 7);\n    this.ionError = createEvent(this, \"ionError\", 7);\n  }\n\n  srcChanged() {\n    this.addIO();\n  }\n\n  componentDidLoad() {\n    this.addIO();\n  }\n\n  addIO() {\n    if (this.src === undefined) {\n      return;\n    }\n\n    if ('IntersectionObserver' in window) {\n      this.removeIO();\n      this.io = new IntersectionObserver(data => {\n        // because there will only ever be one instance\n        // of the element we are observing\n        // we can just use data[0]\n        if (data[0].isIntersecting) {\n          this.load();\n          this.removeIO();\n        }\n      });\n      this.io.observe(this.el);\n    } else {\n      // fall back to setTimeout for Safari and IE\n      setTimeout(() => this.load(), 200);\n    }\n  }\n\n  load() {\n    this.loadError = this.onError;\n    this.loadSrc = this.src;\n    this.ionImgWillLoad.emit();\n  }\n\n  removeIO() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n\n  render() {\n    return h(Host, {\n      class: getIonMode(this)\n    }, h(\"img\", {\n      decoding: \"async\",\n      src: this.loadSrc,\n      alt: this.alt,\n      onLoad: this.onLoad,\n      onError: this.loadError\n    }));\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"src\": [\"srcChanged\"]\n    };\n  }\n\n};\nImg.style = imgCss;\nexport { Img as ion_img };","map":{"version":3,"sources":["/home/joel/projecteionic/node_modules/@ionic/core/dist/esm-es5/ion-img.entry.js"],"names":["r","registerInstance","d","createEvent","h","H","Host","e","getElement","b","getIonMode","imgCss","Img","constructor","hostRef","onLoad","ionImgDidLoad","emit","onError","ionError","ionImgWillLoad","srcChanged","addIO","componentDidLoad","src","undefined","window","removeIO","io","IntersectionObserver","data","isIntersecting","load","observe","el","setTimeout","loadError","loadSrc","disconnect","render","class","decoding","alt","watchers","style","ion_img"],"mappings":"AAAA,SAASA,CAAC,IAAIC,gBAAd,EAAgCC,CAAC,IAAIC,WAArC,EAAkDC,CAAlD,EAAqDC,CAAC,IAAIC,IAA1D,EAAgEC,CAAC,IAAIC,UAArE,QAAuF,qBAAvF;AACA,SAASC,CAAC,IAAIC,UAAd,QAAgC,4BAAhC;AAEA,MAAMC,MAAM,GAAG,oMAAf;AAEA,MAAMC,GAAG,GAAG,MAAM;AACdC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBb,IAAAA,gBAAgB,CAAC,IAAD,EAAOa,OAAP,CAAhB;;AACA,SAAKC,MAAL,GAAc,MAAM;AAChB,WAAKC,aAAL,CAAmBC,IAAnB;AACH,KAFD;;AAGA,SAAKC,OAAL,GAAe,MAAM;AACjB,WAAKC,QAAL,CAAcF,IAAd;AACH,KAFD;;AAGA,SAAKG,cAAL,GAAsBjB,WAAW,CAAC,IAAD,EAAO,gBAAP,EAAyB,CAAzB,CAAjC;AACA,SAAKa,aAAL,GAAqBb,WAAW,CAAC,IAAD,EAAO,eAAP,EAAwB,CAAxB,CAAhC;AACA,SAAKgB,QAAL,GAAgBhB,WAAW,CAAC,IAAD,EAAO,UAAP,EAAmB,CAAnB,CAA3B;AACH;;AACDkB,EAAAA,UAAU,GAAG;AACT,SAAKC,KAAL;AACH;;AACDC,EAAAA,gBAAgB,GAAG;AACf,SAAKD,KAAL;AACH;;AACDA,EAAAA,KAAK,GAAG;AACJ,QAAI,KAAKE,GAAL,KAAaC,SAAjB,EAA4B;AACxB;AACH;;AACD,QAAI,0BAA0BC,MAA9B,EAAsC;AAClC,WAAKC,QAAL;AACA,WAAKC,EAAL,GAAU,IAAIC,oBAAJ,CAAyBC,IAAI,IAAI;AACvC;AACA;AACA;AACA,YAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQC,cAAZ,EAA4B;AACxB,eAAKC,IAAL;AACA,eAAKL,QAAL;AACH;AACJ,OARS,CAAV;AASA,WAAKC,EAAL,CAAQK,OAAR,CAAgB,KAAKC,EAArB;AACH,KAZD,MAaK;AACD;AACAC,MAAAA,UAAU,CAAC,MAAM,KAAKH,IAAL,EAAP,EAAoB,GAApB,CAAV;AACH;AACJ;;AACDA,EAAAA,IAAI,GAAG;AACH,SAAKI,SAAL,GAAiB,KAAKlB,OAAtB;AACA,SAAKmB,OAAL,GAAe,KAAKb,GAApB;AACA,SAAKJ,cAAL,CAAoBH,IAApB;AACH;;AACDU,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAKC,EAAT,EAAa;AACT,WAAKA,EAAL,CAAQU,UAAR;AACA,WAAKV,EAAL,GAAUH,SAAV;AACH;AACJ;;AACDc,EAAAA,MAAM,GAAG;AACL,WAAQnC,CAAC,CAACE,IAAD,EAAO;AAAEkC,MAAAA,KAAK,EAAE9B,UAAU,CAAC,IAAD;AAAnB,KAAP,EAAoCN,CAAC,CAAC,KAAD,EAAQ;AAAEqC,MAAAA,QAAQ,EAAE,OAAZ;AAAqBjB,MAAAA,GAAG,EAAE,KAAKa,OAA/B;AAAwCK,MAAAA,GAAG,EAAE,KAAKA,GAAlD;AAAuD3B,MAAAA,MAAM,EAAE,KAAKA,MAApE;AAA4EG,MAAAA,OAAO,EAAE,KAAKkB;AAA1F,KAAR,CAArC,CAAT;AACH;;AACD,MAAIF,EAAJ,GAAS;AAAE,WAAO1B,UAAU,CAAC,IAAD,CAAjB;AAA0B;;AACrC,aAAWmC,QAAX,GAAsB;AAAE,WAAO;AAC3B,aAAO,CAAC,YAAD;AADoB,KAAP;AAEpB;;AA1DU,CAAlB;AA4DA/B,GAAG,CAACgC,KAAJ,GAAYjC,MAAZ;AAEA,SAASC,GAAG,IAAIiC,OAAhB","sourcesContent":["import { r as registerInstance, d as createEvent, h, H as Host, e as getElement } from './index-2cd7e630.js';\nimport { b as getIonMode } from './ionic-global-a175fa73.js';\n\nconst imgCss = \":host{display:block;-o-object-fit:contain;object-fit:contain}img{display:block;width:100%;height:100%;-o-object-fit:inherit;object-fit:inherit;-o-object-position:inherit;object-position:inherit}\";\n\nconst Img = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.onLoad = () => {\n            this.ionImgDidLoad.emit();\n        };\n        this.onError = () => {\n            this.ionError.emit();\n        };\n        this.ionImgWillLoad = createEvent(this, \"ionImgWillLoad\", 7);\n        this.ionImgDidLoad = createEvent(this, \"ionImgDidLoad\", 7);\n        this.ionError = createEvent(this, \"ionError\", 7);\n    }\n    srcChanged() {\n        this.addIO();\n    }\n    componentDidLoad() {\n        this.addIO();\n    }\n    addIO() {\n        if (this.src === undefined) {\n            return;\n        }\n        if ('IntersectionObserver' in window) {\n            this.removeIO();\n            this.io = new IntersectionObserver(data => {\n                // because there will only ever be one instance\n                // of the element we are observing\n                // we can just use data[0]\n                if (data[0].isIntersecting) {\n                    this.load();\n                    this.removeIO();\n                }\n            });\n            this.io.observe(this.el);\n        }\n        else {\n            // fall back to setTimeout for Safari and IE\n            setTimeout(() => this.load(), 200);\n        }\n    }\n    load() {\n        this.loadError = this.onError;\n        this.loadSrc = this.src;\n        this.ionImgWillLoad.emit();\n    }\n    removeIO() {\n        if (this.io) {\n            this.io.disconnect();\n            this.io = undefined;\n        }\n    }\n    render() {\n        return (h(Host, { class: getIonMode(this) }, h(\"img\", { decoding: \"async\", src: this.loadSrc, alt: this.alt, onLoad: this.onLoad, onError: this.loadError })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"src\": [\"srcChanged\"]\n    }; }\n};\nImg.style = imgCss;\n\nexport { Img as ion_img };\n"]},"metadata":{},"sourceType":"module"}