{"ast":null,"code":"var _jsxFileName = \"/home/joel/projecteionic/src/data/ActivitiesContextProvider.tsx\";\nimport React, { useState } from 'react';\nimport ActivitiesContext from './activities-context';\n\nconst ActivitiesContextProvider = props => {\n  const [activities, setActivities] = useState([{\n    id: Math.random().toString(),\n    title: 'My daily sleep',\n    description: 'Sleep through the night after a day of quarantine',\n    hour: '23:00',\n    activityType: 'rest',\n    imageUrl: '/assets/images/rest.jpg',\n    isCompleted: false\n  }, {\n    id: Math.random().toString(),\n    title: 'Hard work',\n    description: 'Work in the projects I have at Tribalyte',\n    hour: '9:00',\n    activityType: 'work',\n    imageUrl: '/assets/images/work.jpg',\n    isCompleted: false\n  }, {\n    id: Math.random().toString(),\n    title: 'Play ping pong',\n    description: 'Play a ping pong match on the hall table!',\n    hour: '19:00',\n    activityType: 'hobby',\n    imageUrl: '/assets/images/hobby.jpg',\n    isCompleted: false\n  }]);\n\n  const ObtenirPersones = professor => {\n    return [];\n  };\n\n  const [professors, setProfessors] = useState([ObtenirPersones(true)]);\n  const [alumnes, setAlumnes] = useState([ObtenirPersones(false)]);\n\n  const addActivity = (title, description, activityType) => {\n    let imageUrl = '';\n\n    switch (activityType) {\n      case 'rest':\n        imageUrl = '/assets/images/rest.jpg';\n        break;\n\n      case 'hobby':\n        imageUrl = '/assets/images/hobby.jpg';\n        break;\n\n      case 'work':\n        imageUrl = '/assets/images/work.jpg';\n        break;\n\n      default:\n        imageUrl = '/assets/images/work.jpg';\n        break;\n    }\n\n    ;\n    const activityDate = new Date();\n    const hour = activityDate.getHours() + ':' + activityDate.getMinutes();\n    const addActivity = {\n      id: Math.random().toString(),\n      title,\n      description,\n      hour,\n      activityType,\n      imageUrl,\n      isCompleted: false\n    };\n    setActivities(currActivities => {\n      return [...currActivities, addActivity];\n    });\n  };\n\n  const completeActivity = activityId => {\n    setActivities(currActivities => {\n      const updatedActivities = [...currActivities];\n      const selectedActivityIndex = activities.findIndex(act => act.id === activityId);\n      const updatedActivity = { ...updatedActivities[selectedActivityIndex],\n        isCompleted: true\n      };\n      updatedActivities[selectedActivityIndex] = updatedActivity;\n      return updatedActivities;\n    });\n  };\n\n  const activitiesContext = {\n    activities,\n    addActivity,\n    completeActivity,\n    alumnes,\n    professors,\n    ObtenirPersones\n  };\n  return /*#__PURE__*/React.createElement(ActivitiesContext.Provider, {\n    value: activitiesContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\nexport default ActivitiesContextProvider;","map":{"version":3,"sources":["/home/joel/projecteionic/src/data/ActivitiesContextProvider.tsx"],"names":["React","useState","ActivitiesContext","ActivitiesContextProvider","props","activities","setActivities","id","Math","random","toString","title","description","hour","activityType","imageUrl","isCompleted","ObtenirPersones","professor","professors","setProfessors","alumnes","setAlumnes","addActivity","activityDate","Date","getHours","getMinutes","currActivities","completeActivity","activityId","updatedActivities","selectedActivityIndex","findIndex","act","updatedActivity","activitiesContext","children"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport ActivitiesContext, { Activity, ActivitiesContextModel, ActivityType, Persona } from './activities-context';\n\nconst ActivitiesContextProvider: React.FC = (props) => {\n\n    const [activities, setActivities] = useState<Activity[]>([\n        {\n            id: Math.random().toString(),\n            title: 'My daily sleep',\n            description: 'Sleep through the night after a day of quarantine',\n            hour: '23:00',\n            activityType: 'rest',\n            imageUrl: '/assets/images/rest.jpg',\n            isCompleted: false\n        },\n        {\n            id: Math.random().toString(),\n            title: 'Hard work',\n            description: 'Work in the projects I have at Tribalyte',\n            hour: '9:00',\n            activityType: 'work',\n            imageUrl: '/assets/images/work.jpg',\n            isCompleted: false\n        },\n        {\n            id: Math.random().toString(),\n            title: 'Play ping pong',\n            description: 'Play a ping pong match on the hall table!',\n            hour: '19:00',\n            activityType: 'hobby',\n            imageUrl: '/assets/images/hobby.jpg',\n            isCompleted: false\n        }\n    ]);\n\n    const ObtenirPersones = (professor: boolean) => {\n        return [];\n    };\n\n    const [professors, setProfessors] = useState<Persona[]>([\n        ObtenirPersones(true)\n    ]);\n\n    const [alumnes, setAlumnes] = useState<Persona[]>([\n        ObtenirPersones(false)\n    ]);\n\n    const addActivity = (title: string, description: string, activityType: ActivityType) => {\n        let imageUrl = '';\n        switch(activityType) {\n            case 'rest':\n                imageUrl = '/assets/images/rest.jpg'\n                break;\n            case 'hobby':\n                imageUrl = '/assets/images/hobby.jpg'\n                break;\n            case 'work':\n                imageUrl = '/assets/images/work.jpg'\n                break;\n            default:\n                imageUrl = '/assets/images/work.jpg'\n                break;\n        };\n\n        const activityDate = new Date();\n        const hour = activityDate.getHours() + ':' + activityDate.getMinutes();\n\n        const addActivity: Activity = {\n            id: Math.random().toString(),\n            title,\n            description,\n            hour,\n            activityType,\n            imageUrl,\n            isCompleted: false\n        };\n\n        setActivities(currActivities => {\n            return [...currActivities, addActivity]\n        })\n    };\n\n    const completeActivity = (activityId: string) => {\n        setActivities(currActivities => {\n            const updatedActivities = [...currActivities];\n            const selectedActivityIndex = activities.findIndex(act => act.id === activityId);\n            const updatedActivity = {...updatedActivities[selectedActivityIndex], isCompleted: true};\n            updatedActivities[selectedActivityIndex] = updatedActivity;\n            return updatedActivities;\n        });\n    };\n\n    const activitiesContext: ActivitiesContextModel = {\n        activities,\n        addActivity,\n        completeActivity,\n        alumnes,\n        professors,\n        ObtenirPersones\n    };\n\n    return (\n        <ActivitiesContext.Provider value={activitiesContext}>\n            {props.children}\n        </ActivitiesContext.Provider>\n    );\n};\n\nexport default ActivitiesContextProvider;"]},"metadata":{},"sourceType":"module"}