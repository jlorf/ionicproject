{"ast":null,"code":"import { c as getAssetPath } from './index-2cd7e630.js';\nlet CACHED_MAP;\n\nconst getIconMap = () => {\n  if (typeof window === 'undefined') {\n    return new Map();\n  } else {\n    if (!CACHED_MAP) {\n      const win = window;\n      win.Ionicons = win.Ionicons || {};\n      CACHED_MAP = win.Ionicons.map = win.Ionicons.map || new Map();\n    }\n\n    return CACHED_MAP;\n  }\n};\n\nconst getUrl = i => {\n  let url = getSrc(i.src);\n\n  if (url) {\n    return url;\n  }\n\n  url = getName(i.name, i.icon, i.mode, i.ios, i.md);\n\n  if (url) {\n    return getNamedUrl(url);\n  }\n\n  if (i.icon) {\n    url = getSrc(i.icon);\n\n    if (url) {\n      return url;\n    }\n\n    url = getSrc(i.icon[i.mode]);\n\n    if (url) {\n      return url;\n    }\n  }\n\n  return null;\n};\n\nconst getNamedUrl = iconName => {\n  const url = getIconMap().get(iconName);\n\n  if (url) {\n    return url;\n  }\n\n  return getAssetPath(`svg/${iconName}.svg`);\n};\n\nconst getName = (iconName, icon, mode, ios, md) => {\n  // default to \"md\" if somehow the mode wasn't set\n  mode = (mode && toLower(mode)) === 'ios' ? 'ios' : 'md'; // if an icon was passed in using the ios or md attributes\n  // set the iconName to whatever was passed in\n\n  if (ios && mode === 'ios') {\n    iconName = toLower(ios);\n  } else if (md && mode === 'md') {\n    iconName = toLower(md);\n  } else {\n    if (!iconName && icon && !isSrc(icon)) {\n      iconName = icon;\n    }\n\n    if (isStr(iconName)) {\n      iconName = toLower(iconName);\n    }\n  }\n\n  if (!isStr(iconName) || iconName.trim() === '') {\n    return null;\n  } // only allow alpha characters and dash\n\n\n  const invalidChars = iconName.replace(/[a-z]|-|\\d/gi, '');\n\n  if (invalidChars !== '') {\n    return null;\n  }\n\n  return iconName;\n};\n\nconst getSrc = src => {\n  if (isStr(src)) {\n    src = src.trim();\n\n    if (isSrc(src)) {\n      return src;\n    }\n  }\n\n  return null;\n};\n\nconst isSrc = str => str.length > 0 && /(\\/|\\.)/.test(str);\n\nconst isStr = val => typeof val === 'string';\n\nconst toLower = val => val.toLowerCase();\n\nexport { getName as a, getUrl as g, isStr as i };","map":{"version":3,"sources":["/home/joel/projecteionic/node_modules/@ionic/core/dist/esm-es5/utils-35117408.js"],"names":["c","getAssetPath","CACHED_MAP","getIconMap","window","Map","win","Ionicons","map","getUrl","i","url","getSrc","src","getName","name","icon","mode","ios","md","getNamedUrl","iconName","get","toLower","isSrc","isStr","trim","invalidChars","replace","str","length","test","val","toLowerCase","a","g"],"mappings":"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","sourcesContent":["import { c as getAssetPath } from './index-2cd7e630.js';\n\nlet CACHED_MAP;\r\nconst getIconMap = () => {\r\n    if (typeof window === 'undefined') {\r\n        return new Map();\r\n    }\r\n    else {\r\n        if (!CACHED_MAP) {\r\n            const win = window;\r\n            win.Ionicons = win.Ionicons || {};\r\n            CACHED_MAP = win.Ionicons.map = win.Ionicons.map || new Map();\r\n        }\r\n        return CACHED_MAP;\r\n    }\r\n};\r\nconst getUrl = (i) => {\r\n    let url = getSrc(i.src);\r\n    if (url) {\r\n        return url;\r\n    }\r\n    url = getName(i.name, i.icon, i.mode, i.ios, i.md);\r\n    if (url) {\r\n        return getNamedUrl(url);\r\n    }\r\n    if (i.icon) {\r\n        url = getSrc(i.icon);\r\n        if (url) {\r\n            return url;\r\n        }\r\n        url = getSrc(i.icon[i.mode]);\r\n        if (url) {\r\n            return url;\r\n        }\r\n    }\r\n    return null;\r\n};\r\nconst getNamedUrl = (iconName) => {\r\n    const url = getIconMap().get(iconName);\r\n    if (url) {\r\n        return url;\r\n    }\r\n    return getAssetPath(`svg/${iconName}.svg`);\r\n};\r\nconst getName = (iconName, icon, mode, ios, md) => {\r\n    // default to \"md\" if somehow the mode wasn't set\r\n    mode = (mode && toLower(mode)) === 'ios' ? 'ios' : 'md';\r\n    // if an icon was passed in using the ios or md attributes\r\n    // set the iconName to whatever was passed in\r\n    if (ios && mode === 'ios') {\r\n        iconName = toLower(ios);\r\n    }\r\n    else if (md && mode === 'md') {\r\n        iconName = toLower(md);\r\n    }\r\n    else {\r\n        if (!iconName && icon && !isSrc(icon)) {\r\n            iconName = icon;\r\n        }\r\n        if (isStr(iconName)) {\r\n            iconName = toLower(iconName);\r\n        }\r\n    }\r\n    if (!isStr(iconName) || iconName.trim() === '') {\r\n        return null;\r\n    }\r\n    // only allow alpha characters and dash\r\n    const invalidChars = iconName.replace(/[a-z]|-|\\d/gi, '');\r\n    if (invalidChars !== '') {\r\n        return null;\r\n    }\r\n    return iconName;\r\n};\r\nconst getSrc = (src) => {\r\n    if (isStr(src)) {\r\n        src = src.trim();\r\n        if (isSrc(src)) {\r\n            return src;\r\n        }\r\n    }\r\n    return null;\r\n};\r\nconst isSrc = (str) => str.length > 0 && /(\\/|\\.)/.test(str);\r\nconst isStr = (val) => typeof val === 'string';\r\nconst toLower = (val) => val.toLowerCase();\n\nexport { getName as a, getUrl as g, isStr as i };\n"]},"metadata":{},"sourceType":"module"}