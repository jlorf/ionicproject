{"ast":null,"code":"class GestureController {\n  constructor() {\n    this.gestureId = 0;\n    this.requestedStart = new Map();\n    this.disabledGestures = new Map();\n    this.disabledScroll = new Set();\n  }\n  /**\n   * Creates a gesture delegate based on the GestureConfig passed\n   */\n\n\n  createGesture(config) {\n    return new GestureDelegate(this, this.newID(), config.name, config.priority || 0, !!config.disableScroll);\n  }\n  /**\n   * Creates a blocker that will block any other gesture events from firing. Set in the ion-gesture component.\n   */\n\n\n  createBlocker(opts = {}) {\n    return new BlockerDelegate(this, this.newID(), opts.disable, !!opts.disableScroll);\n  }\n\n  start(gestureName, id, priority) {\n    if (!this.canStart(gestureName)) {\n      this.requestedStart.delete(id);\n      return false;\n    }\n\n    this.requestedStart.set(id, priority);\n    return true;\n  }\n\n  capture(gestureName, id, priority) {\n    if (!this.start(gestureName, id, priority)) {\n      return false;\n    }\n\n    const requestedStart = this.requestedStart;\n    let maxPriority = -10000;\n    requestedStart.forEach(value => {\n      maxPriority = Math.max(maxPriority, value);\n    });\n\n    if (maxPriority === priority) {\n      this.capturedId = id;\n      requestedStart.clear();\n      const event = new CustomEvent('ionGestureCaptured', {\n        detail: {\n          gestureName\n        }\n      });\n      document.dispatchEvent(event);\n      return true;\n    }\n\n    requestedStart.delete(id);\n    return false;\n  }\n\n  release(id) {\n    this.requestedStart.delete(id);\n\n    if (this.capturedId === id) {\n      this.capturedId = undefined;\n    }\n  }\n\n  disableGesture(gestureName, id) {\n    let set = this.disabledGestures.get(gestureName);\n\n    if (set === undefined) {\n      set = new Set();\n      this.disabledGestures.set(gestureName, set);\n    }\n\n    set.add(id);\n  }\n\n  enableGesture(gestureName, id) {\n    const set = this.disabledGestures.get(gestureName);\n\n    if (set !== undefined) {\n      set.delete(id);\n    }\n  }\n\n  disableScroll(id) {\n    this.disabledScroll.add(id);\n\n    if (this.disabledScroll.size === 1) {\n      document.body.classList.add(BACKDROP_NO_SCROLL);\n    }\n  }\n\n  enableScroll(id) {\n    this.disabledScroll.delete(id);\n\n    if (this.disabledScroll.size === 0) {\n      document.body.classList.remove(BACKDROP_NO_SCROLL);\n    }\n  }\n\n  canStart(gestureName) {\n    if (this.capturedId !== undefined) {\n      // a gesture already captured\n      return false;\n    }\n\n    if (this.isDisabled(gestureName)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isCaptured() {\n    return this.capturedId !== undefined;\n  }\n\n  isScrollDisabled() {\n    return this.disabledScroll.size > 0;\n  }\n\n  isDisabled(gestureName) {\n    const disabled = this.disabledGestures.get(gestureName);\n\n    if (disabled && disabled.size > 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  newID() {\n    this.gestureId++;\n    return this.gestureId;\n  }\n\n}\n\nclass GestureDelegate {\n  constructor(ctrl, id, name, priority, disableScroll) {\n    this.id = id;\n    this.name = name;\n    this.disableScroll = disableScroll;\n    this.priority = priority * 1000000 + id;\n    this.ctrl = ctrl;\n  }\n\n  canStart() {\n    if (!this.ctrl) {\n      return false;\n    }\n\n    return this.ctrl.canStart(this.name);\n  }\n\n  start() {\n    if (!this.ctrl) {\n      return false;\n    }\n\n    return this.ctrl.start(this.name, this.id, this.priority);\n  }\n\n  capture() {\n    if (!this.ctrl) {\n      return false;\n    }\n\n    const captured = this.ctrl.capture(this.name, this.id, this.priority);\n\n    if (captured && this.disableScroll) {\n      this.ctrl.disableScroll(this.id);\n    }\n\n    return captured;\n  }\n\n  release() {\n    if (this.ctrl) {\n      this.ctrl.release(this.id);\n\n      if (this.disableScroll) {\n        this.ctrl.enableScroll(this.id);\n      }\n    }\n  }\n\n  destroy() {\n    this.release();\n    this.ctrl = undefined;\n  }\n\n}\n\nclass BlockerDelegate {\n  constructor(ctrl, id, disable, disableScroll) {\n    this.id = id;\n    this.disable = disable;\n    this.disableScroll = disableScroll;\n    this.ctrl = ctrl;\n  }\n\n  block() {\n    if (!this.ctrl) {\n      return;\n    }\n\n    if (this.disable) {\n      for (const gesture of this.disable) {\n        this.ctrl.disableGesture(gesture, this.id);\n      }\n    }\n\n    if (this.disableScroll) {\n      this.ctrl.disableScroll(this.id);\n    }\n  }\n\n  unblock() {\n    if (!this.ctrl) {\n      return;\n    }\n\n    if (this.disable) {\n      for (const gesture of this.disable) {\n        this.ctrl.enableGesture(gesture, this.id);\n      }\n    }\n\n    if (this.disableScroll) {\n      this.ctrl.enableScroll(this.id);\n    }\n  }\n\n  destroy() {\n    this.unblock();\n    this.ctrl = undefined;\n  }\n\n}\n\nconst BACKDROP_NO_SCROLL = 'backdrop-no-scroll';\nconst GESTURE_CONTROLLER = new GestureController();\n\nconst addEventListener = (el, eventName, callback, opts) => {\n  // use event listener options when supported\n  // otherwise it's just a boolean for the \"capture\" arg\n  const listenerOpts = supportsPassive(el) ? {\n    'capture': !!opts.capture,\n    'passive': !!opts.passive\n  } : !!opts.capture;\n  let add;\n  let remove;\n\n  if (el['__zone_symbol__addEventListener']) {\n    add = '__zone_symbol__addEventListener';\n    remove = '__zone_symbol__removeEventListener';\n  } else {\n    add = 'addEventListener';\n    remove = 'removeEventListener';\n  }\n\n  el[add](eventName, callback, listenerOpts);\n  return () => {\n    el[remove](eventName, callback, listenerOpts);\n  };\n};\n\nconst supportsPassive = node => {\n  if (_sPassive === undefined) {\n    try {\n      const opts = Object.defineProperty({}, 'passive', {\n        get: () => {\n          _sPassive = true;\n        }\n      });\n      node.addEventListener('optsTest', () => {\n        return;\n      }, opts);\n    } catch (e) {\n      _sPassive = false;\n    }\n  }\n\n  return !!_sPassive;\n};\n\nlet _sPassive;\n\nconst MOUSE_WAIT = 2000;\n\nconst createPointerEvents = (el, pointerDown, pointerMove, pointerUp, options) => {\n  let rmTouchStart;\n  let rmTouchMove;\n  let rmTouchEnd;\n  let rmTouchCancel;\n  let rmMouseStart;\n  let rmMouseMove;\n  let rmMouseUp;\n  let lastTouchEvent = 0;\n\n  const handleTouchStart = ev => {\n    lastTouchEvent = Date.now() + MOUSE_WAIT;\n\n    if (!pointerDown(ev)) {\n      return;\n    }\n\n    if (!rmTouchMove && pointerMove) {\n      rmTouchMove = addEventListener(el, 'touchmove', pointerMove, options);\n    }\n\n    if (!rmTouchEnd) {\n      rmTouchEnd = addEventListener(el, 'touchend', handleTouchEnd, options);\n    }\n\n    if (!rmTouchCancel) {\n      rmTouchCancel = addEventListener(el, 'touchcancel', handleTouchEnd, options);\n    }\n  };\n\n  const handleMouseDown = ev => {\n    if (lastTouchEvent > Date.now()) {\n      return;\n    }\n\n    if (!pointerDown(ev)) {\n      return;\n    }\n\n    if (!rmMouseMove && pointerMove) {\n      rmMouseMove = addEventListener(getDocument(el), 'mousemove', pointerMove, options);\n    }\n\n    if (!rmMouseUp) {\n      rmMouseUp = addEventListener(getDocument(el), 'mouseup', handleMouseUp, options);\n    }\n  };\n\n  const handleTouchEnd = ev => {\n    stopTouch();\n\n    if (pointerUp) {\n      pointerUp(ev);\n    }\n  };\n\n  const handleMouseUp = ev => {\n    stopMouse();\n\n    if (pointerUp) {\n      pointerUp(ev);\n    }\n  };\n\n  const stopTouch = () => {\n    if (rmTouchMove) {\n      rmTouchMove();\n    }\n\n    if (rmTouchEnd) {\n      rmTouchEnd();\n    }\n\n    if (rmTouchCancel) {\n      rmTouchCancel();\n    }\n\n    rmTouchMove = rmTouchEnd = rmTouchCancel = undefined;\n  };\n\n  const stopMouse = () => {\n    if (rmMouseMove) {\n      rmMouseMove();\n    }\n\n    if (rmMouseUp) {\n      rmMouseUp();\n    }\n\n    rmMouseMove = rmMouseUp = undefined;\n  };\n\n  const stop = () => {\n    stopTouch();\n    stopMouse();\n  };\n\n  const enable = (isEnabled = true) => {\n    if (!isEnabled) {\n      if (rmTouchStart) {\n        rmTouchStart();\n      }\n\n      if (rmMouseStart) {\n        rmMouseStart();\n      }\n\n      rmTouchStart = rmMouseStart = undefined;\n      stop();\n    } else {\n      if (!rmTouchStart) {\n        rmTouchStart = addEventListener(el, 'touchstart', handleTouchStart, options);\n      }\n\n      if (!rmMouseStart) {\n        rmMouseStart = addEventListener(el, 'mousedown', handleMouseDown, options);\n      }\n    }\n  };\n\n  const destroy = () => {\n    enable(false);\n    pointerUp = pointerMove = pointerDown = undefined;\n  };\n\n  return {\n    enable,\n    stop,\n    destroy\n  };\n};\n\nconst getDocument = node => {\n  return node instanceof Document ? node : node.ownerDocument;\n};\n\nconst createPanRecognizer = (direction, thresh, maxAngle) => {\n  const radians = maxAngle * (Math.PI / 180);\n  const isDirX = direction === 'x';\n  const maxCosine = Math.cos(radians);\n  const threshold = thresh * thresh;\n  let startX = 0;\n  let startY = 0;\n  let dirty = false;\n  let isPan = 0;\n  return {\n    start(x, y) {\n      startX = x;\n      startY = y;\n      isPan = 0;\n      dirty = true;\n    },\n\n    detect(x, y) {\n      if (!dirty) {\n        return false;\n      }\n\n      const deltaX = x - startX;\n      const deltaY = y - startY;\n      const distance = deltaX * deltaX + deltaY * deltaY;\n\n      if (distance < threshold) {\n        return false;\n      }\n\n      const hypotenuse = Math.sqrt(distance);\n      const cosine = (isDirX ? deltaX : deltaY) / hypotenuse;\n\n      if (cosine > maxCosine) {\n        isPan = 1;\n      } else if (cosine < -maxCosine) {\n        isPan = -1;\n      } else {\n        isPan = 0;\n      }\n\n      dirty = false;\n      return true;\n    },\n\n    isGesture() {\n      return isPan !== 0;\n    },\n\n    getDirection() {\n      return isPan;\n    }\n\n  };\n};\n\nconst createGesture = config => {\n  let hasCapturedPan = false;\n  let hasStartedPan = false;\n  let hasFiredStart = true;\n  let isMoveQueued = false;\n  const finalConfig = Object.assign({\n    disableScroll: false,\n    direction: 'x',\n    gesturePriority: 0,\n    passive: true,\n    maxAngle: 40,\n    threshold: 10\n  }, config);\n  const canStart = finalConfig.canStart;\n  const onWillStart = finalConfig.onWillStart;\n  const onStart = finalConfig.onStart;\n  const onEnd = finalConfig.onEnd;\n  const notCaptured = finalConfig.notCaptured;\n  const onMove = finalConfig.onMove;\n  const threshold = finalConfig.threshold;\n  const detail = {\n    type: 'pan',\n    startX: 0,\n    startY: 0,\n    startTime: 0,\n    currentX: 0,\n    currentY: 0,\n    velocityX: 0,\n    velocityY: 0,\n    deltaX: 0,\n    deltaY: 0,\n    currentTime: 0,\n    event: undefined,\n    data: undefined\n  };\n  const pan = createPanRecognizer(finalConfig.direction, finalConfig.threshold, finalConfig.maxAngle);\n  const gesture = GESTURE_CONTROLLER.createGesture({\n    name: config.gestureName,\n    priority: config.gesturePriority,\n    disableScroll: config.disableScroll\n  });\n\n  const pointerDown = ev => {\n    const timeStamp = now(ev);\n\n    if (hasStartedPan || !hasFiredStart) {\n      return false;\n    }\n\n    updateDetail(ev, detail);\n    detail.startX = detail.currentX;\n    detail.startY = detail.currentY;\n    detail.startTime = detail.currentTime = timeStamp;\n    detail.velocityX = detail.velocityY = detail.deltaX = detail.deltaY = 0;\n    detail.event = ev; // Check if gesture can start\n\n    if (canStart && canStart(detail) === false) {\n      return false;\n    } // Release fallback\n\n\n    gesture.release(); // Start gesture\n\n    if (!gesture.start()) {\n      return false;\n    }\n\n    hasStartedPan = true;\n\n    if (threshold === 0) {\n      return tryToCapturePan();\n    }\n\n    pan.start(detail.startX, detail.startY);\n    return true;\n  };\n\n  const pointerMove = ev => {\n    // fast path, if gesture is currently captured\n    // do minimum job to get user-land even dispatched\n    if (hasCapturedPan) {\n      if (!isMoveQueued && hasFiredStart) {\n        isMoveQueued = true;\n        calcGestureData(detail, ev);\n        requestAnimationFrame(fireOnMove);\n      }\n\n      return;\n    } // gesture is currently being detected\n\n\n    calcGestureData(detail, ev);\n\n    if (pan.detect(detail.currentX, detail.currentY)) {\n      if (!pan.isGesture() || !tryToCapturePan()) {\n        abortGesture();\n      }\n    }\n  };\n\n  const fireOnMove = () => {\n    // Since fireOnMove is called inside a RAF, onEnd() might be called,\n    // we must double check hasCapturedPan\n    if (!hasCapturedPan) {\n      return;\n    }\n\n    isMoveQueued = false;\n\n    if (onMove) {\n      onMove(detail);\n    }\n  };\n\n  const tryToCapturePan = () => {\n    if (gesture && !gesture.capture()) {\n      return false;\n    }\n\n    hasCapturedPan = true;\n    hasFiredStart = false; // reset start position since the real user-land event starts here\n    // If the pan detector threshold is big, not resetting the start position\n    // will cause a jump in the animation equal to the detector threshold.\n    // the array of positions used to calculate the gesture velocity does not\n    // need to be cleaned, more points in the positions array always results in a\n    // more accurate value of the velocity.\n\n    detail.startX = detail.currentX;\n    detail.startY = detail.currentY;\n    detail.startTime = detail.currentTime;\n\n    if (onWillStart) {\n      onWillStart(detail).then(fireOnStart);\n    } else {\n      fireOnStart();\n    }\n\n    return true;\n  };\n\n  const fireOnStart = () => {\n    if (onStart) {\n      onStart(detail);\n    }\n\n    hasFiredStart = true;\n  };\n\n  const reset = () => {\n    hasCapturedPan = false;\n    hasStartedPan = false;\n    isMoveQueued = false;\n    hasFiredStart = true;\n    gesture.release();\n  }; // END *************************\n\n\n  const pointerUp = ev => {\n    const tmpHasCaptured = hasCapturedPan;\n    const tmpHasFiredStart = hasFiredStart;\n    reset();\n\n    if (!tmpHasFiredStart) {\n      return;\n    }\n\n    calcGestureData(detail, ev); // Try to capture press\n\n    if (tmpHasCaptured) {\n      if (onEnd) {\n        onEnd(detail);\n      }\n\n      return;\n    } // Not captured any event\n\n\n    if (notCaptured) {\n      notCaptured(detail);\n    }\n  };\n\n  const pointerEvents = createPointerEvents(finalConfig.el, pointerDown, pointerMove, pointerUp, {\n    capture: false\n  });\n\n  const abortGesture = () => {\n    reset();\n    pointerEvents.stop();\n\n    if (notCaptured) {\n      notCaptured(detail);\n    }\n  };\n\n  return {\n    enable(enable = true) {\n      if (!enable) {\n        if (hasCapturedPan) {\n          pointerUp(undefined);\n        }\n\n        reset();\n      }\n\n      pointerEvents.enable(enable);\n    },\n\n    destroy() {\n      gesture.destroy();\n      pointerEvents.destroy();\n    }\n\n  };\n};\n\nconst calcGestureData = (detail, ev) => {\n  if (!ev) {\n    return;\n  }\n\n  const prevX = detail.currentX;\n  const prevY = detail.currentY;\n  const prevT = detail.currentTime;\n  updateDetail(ev, detail);\n  const currentX = detail.currentX;\n  const currentY = detail.currentY;\n  const timestamp = detail.currentTime = now(ev);\n  const timeDelta = timestamp - prevT;\n\n  if (timeDelta > 0 && timeDelta < 100) {\n    const velocityX = (currentX - prevX) / timeDelta;\n    const velocityY = (currentY - prevY) / timeDelta;\n    detail.velocityX = velocityX * 0.7 + detail.velocityX * 0.3;\n    detail.velocityY = velocityY * 0.7 + detail.velocityY * 0.3;\n  }\n\n  detail.deltaX = currentX - detail.startX;\n  detail.deltaY = currentY - detail.startY;\n  detail.event = ev;\n};\n\nconst updateDetail = (ev, detail) => {\n  // get X coordinates for either a mouse click\n  // or a touch depending on the given event\n  let x = 0;\n  let y = 0;\n\n  if (ev) {\n    const changedTouches = ev.changedTouches;\n\n    if (changedTouches && changedTouches.length > 0) {\n      const touch = changedTouches[0];\n      x = touch.clientX;\n      y = touch.clientY;\n    } else if (ev.pageX !== undefined) {\n      x = ev.pageX;\n      y = ev.pageY;\n    }\n  }\n\n  detail.currentX = x;\n  detail.currentY = y;\n};\n\nconst now = ev => {\n  return ev.timeStamp || Date.now();\n};\n\nexport { GESTURE_CONTROLLER, createGesture };","map":{"version":3,"sources":["/home/joel/projecteionic/node_modules/@ionic/core/dist/esm-es5/index-e44ebcc6.js"],"names":["GestureController","constructor","gestureId","requestedStart","Map","disabledGestures","disabledScroll","Set","createGesture","config","GestureDelegate","newID","name","priority","disableScroll","createBlocker","opts","BlockerDelegate","disable","start","gestureName","id","canStart","delete","set","capture","maxPriority","forEach","value","Math","max","capturedId","clear","event","CustomEvent","detail","document","dispatchEvent","release","undefined","disableGesture","get","add","enableGesture","size","body","classList","BACKDROP_NO_SCROLL","enableScroll","remove","isDisabled","isCaptured","isScrollDisabled","disabled","ctrl","captured","destroy","block","gesture","unblock","GESTURE_CONTROLLER","addEventListener","el","eventName","callback","listenerOpts","supportsPassive","passive","node","_sPassive","Object","defineProperty","e","MOUSE_WAIT","createPointerEvents","pointerDown","pointerMove","pointerUp","options","rmTouchStart","rmTouchMove","rmTouchEnd","rmTouchCancel","rmMouseStart","rmMouseMove","rmMouseUp","lastTouchEvent","handleTouchStart","ev","Date","now","handleTouchEnd","handleMouseDown","getDocument","handleMouseUp","stopTouch","stopMouse","stop","enable","isEnabled","Document","ownerDocument","createPanRecognizer","direction","thresh","maxAngle","radians","PI","isDirX","maxCosine","cos","threshold","startX","startY","dirty","isPan","x","y","detect","deltaX","deltaY","distance","hypotenuse","sqrt","cosine","isGesture","getDirection","hasCapturedPan","hasStartedPan","hasFiredStart","isMoveQueued","finalConfig","assign","gesturePriority","onWillStart","onStart","onEnd","notCaptured","onMove","type","startTime","currentX","currentY","velocityX","velocityY","currentTime","data","pan","timeStamp","updateDetail","tryToCapturePan","calcGestureData","requestAnimationFrame","fireOnMove","abortGesture","then","fireOnStart","reset","tmpHasCaptured","tmpHasFiredStart","pointerEvents","prevX","prevY","prevT","timestamp","timeDelta","changedTouches","length","touch","clientX","clientY","pageX","pageY"],"mappings":"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","sourcesContent":["class GestureController {\n    constructor() {\n        this.gestureId = 0;\n        this.requestedStart = new Map();\n        this.disabledGestures = new Map();\n        this.disabledScroll = new Set();\n    }\n    /**\n     * Creates a gesture delegate based on the GestureConfig passed\n     */\n    createGesture(config) {\n        return new GestureDelegate(this, this.newID(), config.name, config.priority || 0, !!config.disableScroll);\n    }\n    /**\n     * Creates a blocker that will block any other gesture events from firing. Set in the ion-gesture component.\n     */\n    createBlocker(opts = {}) {\n        return new BlockerDelegate(this, this.newID(), opts.disable, !!opts.disableScroll);\n    }\n    start(gestureName, id, priority) {\n        if (!this.canStart(gestureName)) {\n            this.requestedStart.delete(id);\n            return false;\n        }\n        this.requestedStart.set(id, priority);\n        return true;\n    }\n    capture(gestureName, id, priority) {\n        if (!this.start(gestureName, id, priority)) {\n            return false;\n        }\n        const requestedStart = this.requestedStart;\n        let maxPriority = -10000;\n        requestedStart.forEach(value => {\n            maxPriority = Math.max(maxPriority, value);\n        });\n        if (maxPriority === priority) {\n            this.capturedId = id;\n            requestedStart.clear();\n            const event = new CustomEvent('ionGestureCaptured', { detail: { gestureName } });\n            document.dispatchEvent(event);\n            return true;\n        }\n        requestedStart.delete(id);\n        return false;\n    }\n    release(id) {\n        this.requestedStart.delete(id);\n        if (this.capturedId === id) {\n            this.capturedId = undefined;\n        }\n    }\n    disableGesture(gestureName, id) {\n        let set = this.disabledGestures.get(gestureName);\n        if (set === undefined) {\n            set = new Set();\n            this.disabledGestures.set(gestureName, set);\n        }\n        set.add(id);\n    }\n    enableGesture(gestureName, id) {\n        const set = this.disabledGestures.get(gestureName);\n        if (set !== undefined) {\n            set.delete(id);\n        }\n    }\n    disableScroll(id) {\n        this.disabledScroll.add(id);\n        if (this.disabledScroll.size === 1) {\n            document.body.classList.add(BACKDROP_NO_SCROLL);\n        }\n    }\n    enableScroll(id) {\n        this.disabledScroll.delete(id);\n        if (this.disabledScroll.size === 0) {\n            document.body.classList.remove(BACKDROP_NO_SCROLL);\n        }\n    }\n    canStart(gestureName) {\n        if (this.capturedId !== undefined) {\n            // a gesture already captured\n            return false;\n        }\n        if (this.isDisabled(gestureName)) {\n            return false;\n        }\n        return true;\n    }\n    isCaptured() {\n        return this.capturedId !== undefined;\n    }\n    isScrollDisabled() {\n        return this.disabledScroll.size > 0;\n    }\n    isDisabled(gestureName) {\n        const disabled = this.disabledGestures.get(gestureName);\n        if (disabled && disabled.size > 0) {\n            return true;\n        }\n        return false;\n    }\n    newID() {\n        this.gestureId++;\n        return this.gestureId;\n    }\n}\nclass GestureDelegate {\n    constructor(ctrl, id, name, priority, disableScroll) {\n        this.id = id;\n        this.name = name;\n        this.disableScroll = disableScroll;\n        this.priority = priority * 1000000 + id;\n        this.ctrl = ctrl;\n    }\n    canStart() {\n        if (!this.ctrl) {\n            return false;\n        }\n        return this.ctrl.canStart(this.name);\n    }\n    start() {\n        if (!this.ctrl) {\n            return false;\n        }\n        return this.ctrl.start(this.name, this.id, this.priority);\n    }\n    capture() {\n        if (!this.ctrl) {\n            return false;\n        }\n        const captured = this.ctrl.capture(this.name, this.id, this.priority);\n        if (captured && this.disableScroll) {\n            this.ctrl.disableScroll(this.id);\n        }\n        return captured;\n    }\n    release() {\n        if (this.ctrl) {\n            this.ctrl.release(this.id);\n            if (this.disableScroll) {\n                this.ctrl.enableScroll(this.id);\n            }\n        }\n    }\n    destroy() {\n        this.release();\n        this.ctrl = undefined;\n    }\n}\nclass BlockerDelegate {\n    constructor(ctrl, id, disable, disableScroll) {\n        this.id = id;\n        this.disable = disable;\n        this.disableScroll = disableScroll;\n        this.ctrl = ctrl;\n    }\n    block() {\n        if (!this.ctrl) {\n            return;\n        }\n        if (this.disable) {\n            for (const gesture of this.disable) {\n                this.ctrl.disableGesture(gesture, this.id);\n            }\n        }\n        if (this.disableScroll) {\n            this.ctrl.disableScroll(this.id);\n        }\n    }\n    unblock() {\n        if (!this.ctrl) {\n            return;\n        }\n        if (this.disable) {\n            for (const gesture of this.disable) {\n                this.ctrl.enableGesture(gesture, this.id);\n            }\n        }\n        if (this.disableScroll) {\n            this.ctrl.enableScroll(this.id);\n        }\n    }\n    destroy() {\n        this.unblock();\n        this.ctrl = undefined;\n    }\n}\nconst BACKDROP_NO_SCROLL = 'backdrop-no-scroll';\nconst GESTURE_CONTROLLER = new GestureController();\n\nconst addEventListener = (el, eventName, callback, opts) => {\n    // use event listener options when supported\n    // otherwise it's just a boolean for the \"capture\" arg\n    const listenerOpts = supportsPassive(el) ? {\n        'capture': !!opts.capture,\n        'passive': !!opts.passive,\n    } : !!opts.capture;\n    let add;\n    let remove;\n    if (el['__zone_symbol__addEventListener']) {\n        add = '__zone_symbol__addEventListener';\n        remove = '__zone_symbol__removeEventListener';\n    }\n    else {\n        add = 'addEventListener';\n        remove = 'removeEventListener';\n    }\n    el[add](eventName, callback, listenerOpts);\n    return () => {\n        el[remove](eventName, callback, listenerOpts);\n    };\n};\nconst supportsPassive = (node) => {\n    if (_sPassive === undefined) {\n        try {\n            const opts = Object.defineProperty({}, 'passive', {\n                get: () => {\n                    _sPassive = true;\n                }\n            });\n            node.addEventListener('optsTest', () => { return; }, opts);\n        }\n        catch (e) {\n            _sPassive = false;\n        }\n    }\n    return !!_sPassive;\n};\nlet _sPassive;\n\nconst MOUSE_WAIT = 2000;\nconst createPointerEvents = (el, pointerDown, pointerMove, pointerUp, options) => {\n    let rmTouchStart;\n    let rmTouchMove;\n    let rmTouchEnd;\n    let rmTouchCancel;\n    let rmMouseStart;\n    let rmMouseMove;\n    let rmMouseUp;\n    let lastTouchEvent = 0;\n    const handleTouchStart = (ev) => {\n        lastTouchEvent = Date.now() + MOUSE_WAIT;\n        if (!pointerDown(ev)) {\n            return;\n        }\n        if (!rmTouchMove && pointerMove) {\n            rmTouchMove = addEventListener(el, 'touchmove', pointerMove, options);\n        }\n        if (!rmTouchEnd) {\n            rmTouchEnd = addEventListener(el, 'touchend', handleTouchEnd, options);\n        }\n        if (!rmTouchCancel) {\n            rmTouchCancel = addEventListener(el, 'touchcancel', handleTouchEnd, options);\n        }\n    };\n    const handleMouseDown = (ev) => {\n        if (lastTouchEvent > Date.now()) {\n            return;\n        }\n        if (!pointerDown(ev)) {\n            return;\n        }\n        if (!rmMouseMove && pointerMove) {\n            rmMouseMove = addEventListener(getDocument(el), 'mousemove', pointerMove, options);\n        }\n        if (!rmMouseUp) {\n            rmMouseUp = addEventListener(getDocument(el), 'mouseup', handleMouseUp, options);\n        }\n    };\n    const handleTouchEnd = (ev) => {\n        stopTouch();\n        if (pointerUp) {\n            pointerUp(ev);\n        }\n    };\n    const handleMouseUp = (ev) => {\n        stopMouse();\n        if (pointerUp) {\n            pointerUp(ev);\n        }\n    };\n    const stopTouch = () => {\n        if (rmTouchMove) {\n            rmTouchMove();\n        }\n        if (rmTouchEnd) {\n            rmTouchEnd();\n        }\n        if (rmTouchCancel) {\n            rmTouchCancel();\n        }\n        rmTouchMove = rmTouchEnd = rmTouchCancel = undefined;\n    };\n    const stopMouse = () => {\n        if (rmMouseMove) {\n            rmMouseMove();\n        }\n        if (rmMouseUp) {\n            rmMouseUp();\n        }\n        rmMouseMove = rmMouseUp = undefined;\n    };\n    const stop = () => {\n        stopTouch();\n        stopMouse();\n    };\n    const enable = (isEnabled = true) => {\n        if (!isEnabled) {\n            if (rmTouchStart) {\n                rmTouchStart();\n            }\n            if (rmMouseStart) {\n                rmMouseStart();\n            }\n            rmTouchStart = rmMouseStart = undefined;\n            stop();\n        }\n        else {\n            if (!rmTouchStart) {\n                rmTouchStart = addEventListener(el, 'touchstart', handleTouchStart, options);\n            }\n            if (!rmMouseStart) {\n                rmMouseStart = addEventListener(el, 'mousedown', handleMouseDown, options);\n            }\n        }\n    };\n    const destroy = () => {\n        enable(false);\n        pointerUp = pointerMove = pointerDown = undefined;\n    };\n    return {\n        enable,\n        stop,\n        destroy\n    };\n};\nconst getDocument = (node) => {\n    return node instanceof Document ? node : node.ownerDocument;\n};\n\nconst createPanRecognizer = (direction, thresh, maxAngle) => {\n    const radians = maxAngle * (Math.PI / 180);\n    const isDirX = direction === 'x';\n    const maxCosine = Math.cos(radians);\n    const threshold = thresh * thresh;\n    let startX = 0;\n    let startY = 0;\n    let dirty = false;\n    let isPan = 0;\n    return {\n        start(x, y) {\n            startX = x;\n            startY = y;\n            isPan = 0;\n            dirty = true;\n        },\n        detect(x, y) {\n            if (!dirty) {\n                return false;\n            }\n            const deltaX = (x - startX);\n            const deltaY = (y - startY);\n            const distance = deltaX * deltaX + deltaY * deltaY;\n            if (distance < threshold) {\n                return false;\n            }\n            const hypotenuse = Math.sqrt(distance);\n            const cosine = (isDirX ? deltaX : deltaY) / hypotenuse;\n            if (cosine > maxCosine) {\n                isPan = 1;\n            }\n            else if (cosine < -maxCosine) {\n                isPan = -1;\n            }\n            else {\n                isPan = 0;\n            }\n            dirty = false;\n            return true;\n        },\n        isGesture() {\n            return isPan !== 0;\n        },\n        getDirection() {\n            return isPan;\n        }\n    };\n};\n\nconst createGesture = (config) => {\n    let hasCapturedPan = false;\n    let hasStartedPan = false;\n    let hasFiredStart = true;\n    let isMoveQueued = false;\n    const finalConfig = Object.assign({ disableScroll: false, direction: 'x', gesturePriority: 0, passive: true, maxAngle: 40, threshold: 10 }, config);\n    const canStart = finalConfig.canStart;\n    const onWillStart = finalConfig.onWillStart;\n    const onStart = finalConfig.onStart;\n    const onEnd = finalConfig.onEnd;\n    const notCaptured = finalConfig.notCaptured;\n    const onMove = finalConfig.onMove;\n    const threshold = finalConfig.threshold;\n    const detail = {\n        type: 'pan',\n        startX: 0,\n        startY: 0,\n        startTime: 0,\n        currentX: 0,\n        currentY: 0,\n        velocityX: 0,\n        velocityY: 0,\n        deltaX: 0,\n        deltaY: 0,\n        currentTime: 0,\n        event: undefined,\n        data: undefined\n    };\n    const pan = createPanRecognizer(finalConfig.direction, finalConfig.threshold, finalConfig.maxAngle);\n    const gesture = GESTURE_CONTROLLER.createGesture({\n        name: config.gestureName,\n        priority: config.gesturePriority,\n        disableScroll: config.disableScroll\n    });\n    const pointerDown = (ev) => {\n        const timeStamp = now(ev);\n        if (hasStartedPan || !hasFiredStart) {\n            return false;\n        }\n        updateDetail(ev, detail);\n        detail.startX = detail.currentX;\n        detail.startY = detail.currentY;\n        detail.startTime = detail.currentTime = timeStamp;\n        detail.velocityX = detail.velocityY = detail.deltaX = detail.deltaY = 0;\n        detail.event = ev;\n        // Check if gesture can start\n        if (canStart && canStart(detail) === false) {\n            return false;\n        }\n        // Release fallback\n        gesture.release();\n        // Start gesture\n        if (!gesture.start()) {\n            return false;\n        }\n        hasStartedPan = true;\n        if (threshold === 0) {\n            return tryToCapturePan();\n        }\n        pan.start(detail.startX, detail.startY);\n        return true;\n    };\n    const pointerMove = (ev) => {\n        // fast path, if gesture is currently captured\n        // do minimum job to get user-land even dispatched\n        if (hasCapturedPan) {\n            if (!isMoveQueued && hasFiredStart) {\n                isMoveQueued = true;\n                calcGestureData(detail, ev);\n                requestAnimationFrame(fireOnMove);\n            }\n            return;\n        }\n        // gesture is currently being detected\n        calcGestureData(detail, ev);\n        if (pan.detect(detail.currentX, detail.currentY)) {\n            if (!pan.isGesture() || !tryToCapturePan()) {\n                abortGesture();\n            }\n        }\n    };\n    const fireOnMove = () => {\n        // Since fireOnMove is called inside a RAF, onEnd() might be called,\n        // we must double check hasCapturedPan\n        if (!hasCapturedPan) {\n            return;\n        }\n        isMoveQueued = false;\n        if (onMove) {\n            onMove(detail);\n        }\n    };\n    const tryToCapturePan = () => {\n        if (gesture && !gesture.capture()) {\n            return false;\n        }\n        hasCapturedPan = true;\n        hasFiredStart = false;\n        // reset start position since the real user-land event starts here\n        // If the pan detector threshold is big, not resetting the start position\n        // will cause a jump in the animation equal to the detector threshold.\n        // the array of positions used to calculate the gesture velocity does not\n        // need to be cleaned, more points in the positions array always results in a\n        // more accurate value of the velocity.\n        detail.startX = detail.currentX;\n        detail.startY = detail.currentY;\n        detail.startTime = detail.currentTime;\n        if (onWillStart) {\n            onWillStart(detail).then(fireOnStart);\n        }\n        else {\n            fireOnStart();\n        }\n        return true;\n    };\n    const fireOnStart = () => {\n        if (onStart) {\n            onStart(detail);\n        }\n        hasFiredStart = true;\n    };\n    const reset = () => {\n        hasCapturedPan = false;\n        hasStartedPan = false;\n        isMoveQueued = false;\n        hasFiredStart = true;\n        gesture.release();\n    };\n    // END *************************\n    const pointerUp = (ev) => {\n        const tmpHasCaptured = hasCapturedPan;\n        const tmpHasFiredStart = hasFiredStart;\n        reset();\n        if (!tmpHasFiredStart) {\n            return;\n        }\n        calcGestureData(detail, ev);\n        // Try to capture press\n        if (tmpHasCaptured) {\n            if (onEnd) {\n                onEnd(detail);\n            }\n            return;\n        }\n        // Not captured any event\n        if (notCaptured) {\n            notCaptured(detail);\n        }\n    };\n    const pointerEvents = createPointerEvents(finalConfig.el, pointerDown, pointerMove, pointerUp, {\n        capture: false,\n    });\n    const abortGesture = () => {\n        reset();\n        pointerEvents.stop();\n        if (notCaptured) {\n            notCaptured(detail);\n        }\n    };\n    return {\n        enable(enable = true) {\n            if (!enable) {\n                if (hasCapturedPan) {\n                    pointerUp(undefined);\n                }\n                reset();\n            }\n            pointerEvents.enable(enable);\n        },\n        destroy() {\n            gesture.destroy();\n            pointerEvents.destroy();\n        }\n    };\n};\nconst calcGestureData = (detail, ev) => {\n    if (!ev) {\n        return;\n    }\n    const prevX = detail.currentX;\n    const prevY = detail.currentY;\n    const prevT = detail.currentTime;\n    updateDetail(ev, detail);\n    const currentX = detail.currentX;\n    const currentY = detail.currentY;\n    const timestamp = detail.currentTime = now(ev);\n    const timeDelta = timestamp - prevT;\n    if (timeDelta > 0 && timeDelta < 100) {\n        const velocityX = (currentX - prevX) / timeDelta;\n        const velocityY = (currentY - prevY) / timeDelta;\n        detail.velocityX = velocityX * 0.7 + detail.velocityX * 0.3;\n        detail.velocityY = velocityY * 0.7 + detail.velocityY * 0.3;\n    }\n    detail.deltaX = currentX - detail.startX;\n    detail.deltaY = currentY - detail.startY;\n    detail.event = ev;\n};\nconst updateDetail = (ev, detail) => {\n    // get X coordinates for either a mouse click\n    // or a touch depending on the given event\n    let x = 0;\n    let y = 0;\n    if (ev) {\n        const changedTouches = ev.changedTouches;\n        if (changedTouches && changedTouches.length > 0) {\n            const touch = changedTouches[0];\n            x = touch.clientX;\n            y = touch.clientY;\n        }\n        else if (ev.pageX !== undefined) {\n            x = ev.pageX;\n            y = ev.pageY;\n        }\n    }\n    detail.currentX = x;\n    detail.currentY = y;\n};\nconst now = (ev) => {\n    return ev.timeStamp || Date.now();\n};\n\nexport { GESTURE_CONTROLLER, createGesture };\n"]},"metadata":{},"sourceType":"module"}