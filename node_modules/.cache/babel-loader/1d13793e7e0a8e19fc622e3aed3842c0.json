{"ast":null,"code":"import { p as pointerCoord } from './helpers-d8b49b57.js';\nconst cloneMap = new WeakMap();\n\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0) => {\n  if (cloneMap.has(componentEl) === shouldRelocate) {\n    return;\n  }\n\n  if (shouldRelocate) {\n    addClone(componentEl, inputEl, inputRelativeY);\n  } else {\n    removeClone(componentEl, inputEl);\n  }\n};\n\nconst isFocused = input => {\n  return input === input.getRootNode().activeElement;\n};\n\nconst addClone = (componentEl, inputEl, inputRelativeY) => {\n  // this allows for the actual input to receive the focus from\n  // the user's touch event, but before it receives focus, it\n  // moves the actual input to a location that will not screw\n  // up the app's layout, and does not allow the native browser\n  // to attempt to scroll the input into place (messing up headers/footers)\n  // the cloned input fills the area of where native input should be\n  // while the native input fakes out the browser by relocating itself\n  // before it receives the actual focus event\n  // We hide the focused input (with the visible caret) invisible by making it scale(0),\n  const parentEl = inputEl.parentNode; // DOM WRITES\n\n  const clonedEl = inputEl.cloneNode(false);\n  clonedEl.classList.add('cloned-input');\n  clonedEl.tabIndex = -1;\n  parentEl.appendChild(clonedEl);\n  cloneMap.set(componentEl, clonedEl);\n  const doc = componentEl.ownerDocument;\n  const tx = doc.dir === 'rtl' ? 9999 : -9999;\n  componentEl.style.pointerEvents = 'none';\n  inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\n\nconst removeClone = (componentEl, inputEl) => {\n  const clone = cloneMap.get(componentEl);\n\n  if (clone) {\n    cloneMap.delete(componentEl);\n    clone.remove();\n  }\n\n  componentEl.style.pointerEvents = '';\n  inputEl.style.transform = '';\n};\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n  if (!scrollEl || !inputEl) {\n    return () => {\n      return;\n    };\n  }\n\n  const scrollHideCaret = shouldHideCaret => {\n    if (isFocused(inputEl)) {\n      relocateInput(componentEl, inputEl, shouldHideCaret);\n    }\n  };\n\n  const onBlur = () => relocateInput(componentEl, inputEl, false);\n\n  const hideCaret = () => scrollHideCaret(true);\n\n  const showCaret = () => scrollHideCaret(false);\n\n  scrollEl.addEventListener('ionScrollStart', hideCaret);\n  scrollEl.addEventListener('ionScrollEnd', showCaret);\n  inputEl.addEventListener('blur', onBlur);\n  return () => {\n    scrollEl.removeEventListener('ionScrollStart', hideCaret);\n    scrollEl.removeEventListener('ionScrollEnd', showCaret);\n    inputEl.addEventListener('ionBlur', onBlur);\n  };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur]';\n\nconst enableInputBlurring = () => {\n  let focused = true;\n  let didScroll = false;\n  const doc = document;\n\n  const onScroll = () => {\n    didScroll = true;\n  };\n\n  const onFocusin = () => {\n    focused = true;\n  };\n\n  const onTouchend = ev => {\n    // if app did scroll return early\n    if (didScroll) {\n      didScroll = false;\n      return;\n    }\n\n    const active = doc.activeElement;\n\n    if (!active) {\n      return;\n    } // only blur if the active element is a text-input or a textarea\n\n\n    if (active.matches(SKIP_SELECTOR)) {\n      return;\n    } // if the selected target is the active element, do not blur\n\n\n    const tapped = ev.target;\n\n    if (tapped === active) {\n      return;\n    }\n\n    if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n      return;\n    }\n\n    focused = false; // TODO: find a better way, why 50ms?\n\n    setTimeout(() => {\n      if (!focused) {\n        active.blur();\n      }\n    }, 50);\n  };\n\n  doc.addEventListener('ionScrollStart', onScroll);\n  doc.addEventListener('focusin', onFocusin, true);\n  doc.addEventListener('touchend', onTouchend, false);\n  return () => {\n    doc.removeEventListener('ionScrollStart', onScroll, true);\n    doc.removeEventListener('focusin', onFocusin, true);\n    doc.removeEventListener('touchend', onTouchend, false);\n  };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\n\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n  const itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\n  return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\n};\n\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n  // compute input's Y values relative to the body\n  const inputTop = inputRect.top;\n  const inputBottom = inputRect.bottom; // compute visible area\n\n  const visibleAreaTop = contentRect.top;\n  const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight); // compute safe area\n\n  const safeAreaTop = visibleAreaTop + 15;\n  const safeAreaBottom = visibleAreaBottom * 0.5; // figure out if each edge of the input is within the safe area\n\n  const distanceToBottom = safeAreaBottom - inputBottom;\n  const distanceToTop = safeAreaTop - inputTop; // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n\n  const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0); // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n  // gets focus, so make sure we don't scroll the input above the visible area\n\n  const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n  const distance = Math.abs(scrollAmount);\n  const duration = distance / SCROLL_ASSIST_SPEED;\n  const scrollDuration = Math.min(400, Math.max(150, duration));\n  return {\n    scrollAmount,\n    scrollDuration,\n    scrollPadding: keyboardHeight,\n    inputSafeY: -(inputTop - safeAreaTop) + 4\n  };\n};\n\nconst enableScrollAssist = (componentEl, inputEl, contentEl, keyboardHeight) => {\n  let coord;\n\n  const touchStart = ev => {\n    coord = pointerCoord(ev);\n  };\n\n  const touchEnd = ev => {\n    // input cover touchend/mouseup\n    if (!coord) {\n      return;\n    } // get where the touchend/mouseup ended\n\n\n    const endCoord = pointerCoord(ev); // focus this input if the pointer hasn't moved XX pixels\n    // and the input doesn't already have focus\n\n    if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n      ev.preventDefault();\n      ev.stopPropagation(); // begin the input focus process\n\n      jsSetFocus(componentEl, inputEl, contentEl, keyboardHeight);\n    }\n  };\n\n  componentEl.addEventListener('touchstart', touchStart, true);\n  componentEl.addEventListener('touchend', touchEnd, true);\n  return () => {\n    componentEl.removeEventListener('touchstart', touchStart, true);\n    componentEl.removeEventListener('touchend', touchEnd, true);\n  };\n};\n\nconst jsSetFocus = (componentEl, inputEl, contentEl, keyboardHeight) => {\n  const scrollData = getScrollData(componentEl, contentEl, keyboardHeight);\n\n  if (Math.abs(scrollData.scrollAmount) < 4) {\n    // the text input is in a safe position that doesn't\n    // require it to be scrolled into view, just set focus now\n    inputEl.focus();\n    return;\n  } // temporarily move the focus to the focus holder so the browser\n  // doesn't freak out while it's trying to get the input in place\n  // at this point the native text input still does not have focus\n\n\n  relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n  inputEl.focus();\n  /* tslint:disable-next-line */\n\n  if (typeof window !== 'undefined') {\n    let scrollContentTimeout;\n\n    const scrollContent = async () => {\n      // clean up listeners and timeouts\n      if (scrollContentTimeout !== undefined) {\n        clearTimeout(scrollContentTimeout);\n      }\n\n      window.removeEventListener('resize', scrollContent); // scroll the input into place\n\n      await contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration); // the scroll view is in the correct position now\n      // give the native text input focus\n\n      relocateInput(componentEl, inputEl, false, scrollData.inputSafeY); // ensure this is the focused input\n\n      inputEl.focus();\n    };\n\n    window.addEventListener('resize', scrollContent); // fallback in case resize never fires\n\n    scrollContentTimeout = setTimeout(scrollContent, 1000);\n  }\n};\n\nconst hasPointerMoved = (threshold, startCoord, endCoord) => {\n  if (startCoord && endCoord) {\n    const deltaX = startCoord.x - endCoord.x;\n    const deltaY = startCoord.y - endCoord.y;\n    const distance = deltaX * deltaX + deltaY * deltaY;\n    return distance > threshold * threshold;\n  }\n\n  return false;\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\n\nconst enableScrollPadding = keyboardHeight => {\n  const doc = document;\n\n  const onFocusin = ev => {\n    setScrollPadding(ev.target, keyboardHeight);\n  };\n\n  const onFocusout = ev => {\n    setScrollPadding(ev.target, 0);\n  };\n\n  doc.addEventListener('focusin', onFocusin);\n  doc.addEventListener('focusout', onFocusout);\n  return () => {\n    doc.removeEventListener('focusin', onFocusin);\n    doc.removeEventListener('focusout', onFocusout);\n  };\n};\n\nconst setScrollPadding = (input, keyboardHeight) => {\n  if (input.tagName !== 'INPUT') {\n    return;\n  }\n\n  if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n    return;\n  }\n\n  if (input.parentElement && input.parentElement.parentElement && input.parentElement.parentElement.tagName === 'ION-SEARCHBAR') {\n    return;\n  }\n\n  const el = input.closest('ion-content');\n\n  if (el === null) {\n    return;\n  }\n\n  const timer = el[PADDING_TIMER_KEY];\n\n  if (timer) {\n    clearTimeout(timer);\n  }\n\n  if (keyboardHeight > 0) {\n    el.style.setProperty('--keyboard-offset', `${keyboardHeight}px`);\n  } else {\n    el[PADDING_TIMER_KEY] = setTimeout(() => {\n      el.style.setProperty('--keyboard-offset', '0px');\n    }, 120);\n  }\n};\n\nconst INPUT_BLURRING = true;\nconst SCROLL_PADDING = true;\n\nconst startInputShims = config => {\n  const doc = document;\n  const keyboardHeight = config.getNumber('keyboardHeight', 290);\n  const scrollAssist = config.getBoolean('scrollAssist', true);\n  const hideCaret = config.getBoolean('hideCaretOnScroll', true);\n  const inputBlurring = config.getBoolean('inputBlurring', true);\n  const scrollPadding = config.getBoolean('scrollPadding', true);\n  const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n  const hideCaretMap = new WeakMap();\n  const scrollAssistMap = new WeakMap();\n\n  const registerInput = async componentEl => {\n    if (componentEl.componentOnReady) {\n      await componentEl.componentOnReady();\n    }\n\n    const inputRoot = componentEl.shadowRoot || componentEl;\n    const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n    const scrollEl = componentEl.closest('ion-content');\n\n    if (!inputEl) {\n      return;\n    }\n\n    if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n      const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n      hideCaretMap.set(componentEl, rmFn);\n    }\n\n    if (!!scrollEl && scrollAssist && !scrollAssistMap.has(componentEl)) {\n      const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, keyboardHeight);\n      scrollAssistMap.set(componentEl, rmFn);\n    }\n  };\n\n  const unregisterInput = componentEl => {\n    if (hideCaret) {\n      const fn = hideCaretMap.get(componentEl);\n\n      if (fn) {\n        fn();\n      }\n\n      hideCaretMap.delete(componentEl);\n    }\n\n    if (scrollAssist) {\n      const fn = scrollAssistMap.get(componentEl);\n\n      if (fn) {\n        fn();\n      }\n\n      scrollAssistMap.delete(componentEl);\n    }\n  };\n\n  if (inputBlurring && INPUT_BLURRING) {\n    enableInputBlurring();\n  }\n\n  if (scrollPadding && SCROLL_PADDING) {\n    enableScrollPadding(keyboardHeight);\n  } // Input might be already loaded in the DOM before ion-device-hacks did.\n  // At this point we need to look for all of the inputs not registered yet\n  // and register them.\n\n\n  for (const input of inputs) {\n    registerInput(input);\n  }\n\n  doc.addEventListener('ionInputDidLoad', ev => {\n    registerInput(ev.detail);\n  });\n  doc.addEventListener('ionInputDidUnload', ev => {\n    unregisterInput(ev.detail);\n  });\n};\n\nexport { startInputShims };","map":{"version":3,"sources":["/home/joel/projecteionic/node_modules/@ionic/core/dist/esm-es5/input-shims-af289659.js"],"names":["p","pointerCoord","cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","appendChild","set","doc","ownerDocument","tx","dir","style","pointerEvents","transform","clone","get","delete","remove","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","onBlur","hideCaret","showCaret","addEventListener","removeEventListener","SKIP_SELECTOR","enableInputBlurring","focused","didScroll","document","onScroll","onFocusin","onTouchend","ev","active","matches","tapped","target","closest","setTimeout","blur","SCROLL_ASSIST_SPEED","getScrollData","contentEl","keyboardHeight","itemEl","calcScrollData","getBoundingClientRect","defaultView","innerHeight","inputRect","contentRect","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","visibleAreaBottom","Math","min","safeAreaTop","safeAreaBottom","distanceToBottom","distanceToTop","desiredScrollAmount","round","scrollAmount","distance","abs","duration","scrollDuration","max","scrollPadding","inputSafeY","enableScrollAssist","coord","touchStart","touchEnd","endCoord","hasPointerMoved","preventDefault","stopPropagation","jsSetFocus","scrollData","focus","window","scrollContentTimeout","scrollContent","undefined","clearTimeout","scrollByPoint","threshold","startCoord","deltaX","x","deltaY","y","PADDING_TIMER_KEY","enableScrollPadding","setScrollPadding","onFocusout","tagName","parentElement","el","timer","setProperty","INPUT_BLURRING","SCROLL_PADDING","startInputShims","config","getNumber","scrollAssist","getBoolean","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","registerInput","componentOnReady","inputRoot","shadowRoot","querySelector","rmFn","unregisterInput","fn","detail"],"mappings":"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","sourcesContent":["import { p as pointerCoord } from './helpers-d8b49b57.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0) => {\n    if (cloneMap.has(componentEl) === shouldRelocate) {\n        return;\n    }\n    if (shouldRelocate) {\n        addClone(componentEl, inputEl, inputRelativeY);\n    }\n    else {\n        removeClone(componentEl, inputEl);\n    }\n};\nconst isFocused = (input) => {\n    return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY) => {\n    // this allows for the actual input to receive the focus from\n    // the user's touch event, but before it receives focus, it\n    // moves the actual input to a location that will not screw\n    // up the app's layout, and does not allow the native browser\n    // to attempt to scroll the input into place (messing up headers/footers)\n    // the cloned input fills the area of where native input should be\n    // while the native input fakes out the browser by relocating itself\n    // before it receives the actual focus event\n    // We hide the focused input (with the visible caret) invisible by making it scale(0),\n    const parentEl = inputEl.parentNode;\n    // DOM WRITES\n    const clonedEl = inputEl.cloneNode(false);\n    clonedEl.classList.add('cloned-input');\n    clonedEl.tabIndex = -1;\n    parentEl.appendChild(clonedEl);\n    cloneMap.set(componentEl, clonedEl);\n    const doc = componentEl.ownerDocument;\n    const tx = doc.dir === 'rtl' ? 9999 : -9999;\n    componentEl.style.pointerEvents = 'none';\n    inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n    const clone = cloneMap.get(componentEl);\n    if (clone) {\n        cloneMap.delete(componentEl);\n        clone.remove();\n    }\n    componentEl.style.pointerEvents = '';\n    inputEl.style.transform = '';\n};\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n    if (!scrollEl || !inputEl) {\n        return () => { return; };\n    }\n    const scrollHideCaret = (shouldHideCaret) => {\n        if (isFocused(inputEl)) {\n            relocateInput(componentEl, inputEl, shouldHideCaret);\n        }\n    };\n    const onBlur = () => relocateInput(componentEl, inputEl, false);\n    const hideCaret = () => scrollHideCaret(true);\n    const showCaret = () => scrollHideCaret(false);\n    scrollEl.addEventListener('ionScrollStart', hideCaret);\n    scrollEl.addEventListener('ionScrollEnd', showCaret);\n    inputEl.addEventListener('blur', onBlur);\n    return () => {\n        scrollEl.removeEventListener('ionScrollStart', hideCaret);\n        scrollEl.removeEventListener('ionScrollEnd', showCaret);\n        inputEl.addEventListener('ionBlur', onBlur);\n    };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur]';\nconst enableInputBlurring = () => {\n    let focused = true;\n    let didScroll = false;\n    const doc = document;\n    const onScroll = () => {\n        didScroll = true;\n    };\n    const onFocusin = () => {\n        focused = true;\n    };\n    const onTouchend = (ev) => {\n        // if app did scroll return early\n        if (didScroll) {\n            didScroll = false;\n            return;\n        }\n        const active = doc.activeElement;\n        if (!active) {\n            return;\n        }\n        // only blur if the active element is a text-input or a textarea\n        if (active.matches(SKIP_SELECTOR)) {\n            return;\n        }\n        // if the selected target is the active element, do not blur\n        const tapped = ev.target;\n        if (tapped === active) {\n            return;\n        }\n        if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n            return;\n        }\n        focused = false;\n        // TODO: find a better way, why 50ms?\n        setTimeout(() => {\n            if (!focused) {\n                active.blur();\n            }\n        }, 50);\n    };\n    doc.addEventListener('ionScrollStart', onScroll);\n    doc.addEventListener('focusin', onFocusin, true);\n    doc.addEventListener('touchend', onTouchend, false);\n    return () => {\n        doc.removeEventListener('ionScrollStart', onScroll, true);\n        doc.removeEventListener('focusin', onFocusin, true);\n        doc.removeEventListener('touchend', onTouchend, false);\n    };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n    const itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\n    return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n    // compute input's Y values relative to the body\n    const inputTop = inputRect.top;\n    const inputBottom = inputRect.bottom;\n    // compute visible area\n    const visibleAreaTop = contentRect.top;\n    const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n    // compute safe area\n    const safeAreaTop = visibleAreaTop + 15;\n    const safeAreaBottom = visibleAreaBottom * 0.5;\n    // figure out if each edge of the input is within the safe area\n    const distanceToBottom = safeAreaBottom - inputBottom;\n    const distanceToTop = safeAreaTop - inputTop;\n    // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n    const desiredScrollAmount = Math.round((distanceToBottom < 0)\n        ? -distanceToBottom\n        : (distanceToTop > 0)\n            ? -distanceToTop\n            : 0);\n    // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n    // gets focus, so make sure we don't scroll the input above the visible area\n    const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n    const distance = Math.abs(scrollAmount);\n    const duration = distance / SCROLL_ASSIST_SPEED;\n    const scrollDuration = Math.min(400, Math.max(150, duration));\n    return {\n        scrollAmount,\n        scrollDuration,\n        scrollPadding: keyboardHeight,\n        inputSafeY: -(inputTop - safeAreaTop) + 4\n    };\n};\n\nconst enableScrollAssist = (componentEl, inputEl, contentEl, keyboardHeight) => {\n    let coord;\n    const touchStart = (ev) => {\n        coord = pointerCoord(ev);\n    };\n    const touchEnd = (ev) => {\n        // input cover touchend/mouseup\n        if (!coord) {\n            return;\n        }\n        // get where the touchend/mouseup ended\n        const endCoord = pointerCoord(ev);\n        // focus this input if the pointer hasn't moved XX pixels\n        // and the input doesn't already have focus\n        if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            // begin the input focus process\n            jsSetFocus(componentEl, inputEl, contentEl, keyboardHeight);\n        }\n    };\n    componentEl.addEventListener('touchstart', touchStart, true);\n    componentEl.addEventListener('touchend', touchEnd, true);\n    return () => {\n        componentEl.removeEventListener('touchstart', touchStart, true);\n        componentEl.removeEventListener('touchend', touchEnd, true);\n    };\n};\nconst jsSetFocus = (componentEl, inputEl, contentEl, keyboardHeight) => {\n    const scrollData = getScrollData(componentEl, contentEl, keyboardHeight);\n    if (Math.abs(scrollData.scrollAmount) < 4) {\n        // the text input is in a safe position that doesn't\n        // require it to be scrolled into view, just set focus now\n        inputEl.focus();\n        return;\n    }\n    // temporarily move the focus to the focus holder so the browser\n    // doesn't freak out while it's trying to get the input in place\n    // at this point the native text input still does not have focus\n    relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n    inputEl.focus();\n    /* tslint:disable-next-line */\n    if (typeof window !== 'undefined') {\n        let scrollContentTimeout;\n        const scrollContent = async () => {\n            // clean up listeners and timeouts\n            if (scrollContentTimeout !== undefined) {\n                clearTimeout(scrollContentTimeout);\n            }\n            window.removeEventListener('resize', scrollContent);\n            // scroll the input into place\n            await contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration);\n            // the scroll view is in the correct position now\n            // give the native text input focus\n            relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n            // ensure this is the focused input\n            inputEl.focus();\n        };\n        window.addEventListener('resize', scrollContent);\n        // fallback in case resize never fires\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n    }\n};\nconst hasPointerMoved = (threshold, startCoord, endCoord) => {\n    if (startCoord && endCoord) {\n        const deltaX = (startCoord.x - endCoord.x);\n        const deltaY = (startCoord.y - endCoord.y);\n        const distance = deltaX * deltaX + deltaY * deltaY;\n        return distance > (threshold * threshold);\n    }\n    return false;\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\nconst enableScrollPadding = (keyboardHeight) => {\n    const doc = document;\n    const onFocusin = (ev) => {\n        setScrollPadding(ev.target, keyboardHeight);\n    };\n    const onFocusout = (ev) => {\n        setScrollPadding(ev.target, 0);\n    };\n    doc.addEventListener('focusin', onFocusin);\n    doc.addEventListener('focusout', onFocusout);\n    return () => {\n        doc.removeEventListener('focusin', onFocusin);\n        doc.removeEventListener('focusout', onFocusout);\n    };\n};\nconst setScrollPadding = (input, keyboardHeight) => {\n    if (input.tagName !== 'INPUT') {\n        return;\n    }\n    if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n        return;\n    }\n    if (input.parentElement &&\n        input.parentElement.parentElement &&\n        input.parentElement.parentElement.tagName === 'ION-SEARCHBAR') {\n        return;\n    }\n    const el = input.closest('ion-content');\n    if (el === null) {\n        return;\n    }\n    const timer = el[PADDING_TIMER_KEY];\n    if (timer) {\n        clearTimeout(timer);\n    }\n    if (keyboardHeight > 0) {\n        el.style.setProperty('--keyboard-offset', `${keyboardHeight}px`);\n    }\n    else {\n        el[PADDING_TIMER_KEY] = setTimeout(() => {\n            el.style.setProperty('--keyboard-offset', '0px');\n        }, 120);\n    }\n};\n\nconst INPUT_BLURRING = true;\nconst SCROLL_PADDING = true;\nconst startInputShims = (config) => {\n    const doc = document;\n    const keyboardHeight = config.getNumber('keyboardHeight', 290);\n    const scrollAssist = config.getBoolean('scrollAssist', true);\n    const hideCaret = config.getBoolean('hideCaretOnScroll', true);\n    const inputBlurring = config.getBoolean('inputBlurring', true);\n    const scrollPadding = config.getBoolean('scrollPadding', true);\n    const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n    const hideCaretMap = new WeakMap();\n    const scrollAssistMap = new WeakMap();\n    const registerInput = async (componentEl) => {\n        if (componentEl.componentOnReady) {\n            await componentEl.componentOnReady();\n        }\n        const inputRoot = componentEl.shadowRoot || componentEl;\n        const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n        const scrollEl = componentEl.closest('ion-content');\n        if (!inputEl) {\n            return;\n        }\n        if ( !!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n            const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n            hideCaretMap.set(componentEl, rmFn);\n        }\n        if ( !!scrollEl && scrollAssist && !scrollAssistMap.has(componentEl)) {\n            const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, keyboardHeight);\n            scrollAssistMap.set(componentEl, rmFn);\n        }\n    };\n    const unregisterInput = (componentEl) => {\n        if ( hideCaret) {\n            const fn = hideCaretMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            hideCaretMap.delete(componentEl);\n        }\n        if ( scrollAssist) {\n            const fn = scrollAssistMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            scrollAssistMap.delete(componentEl);\n        }\n    };\n    if (inputBlurring && INPUT_BLURRING) {\n        enableInputBlurring();\n    }\n    if (scrollPadding && SCROLL_PADDING) {\n        enableScrollPadding(keyboardHeight);\n    }\n    // Input might be already loaded in the DOM before ion-device-hacks did.\n    // At this point we need to look for all of the inputs not registered yet\n    // and register them.\n    for (const input of inputs) {\n        registerInput(input);\n    }\n    doc.addEventListener('ionInputDidLoad', ((ev) => {\n        registerInput(ev.detail);\n    }));\n    doc.addEventListener('ionInputDidUnload', ((ev) => {\n        unregisterInput(ev.detail);\n    }));\n};\n\nexport { startInputShims };\n"]},"metadata":{},"sourceType":"module"}