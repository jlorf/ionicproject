{"ast":null,"code":"import { r as registerInstance, d as createEvent, h, e as getElement, H as Host } from './index-2cd7e630.js';\nimport { b as getIonMode, c as config } from './ionic-global-a175fa73.js';\nimport { b as assert } from './helpers-d8b49b57.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-157155ee.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-685f606a.js';\nimport { a as attachComponent } from './framework-delegate-d1eb6504.js';\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\n\nclass ViewController {\n  constructor(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n\n  async init(container) {\n    this.state = VIEW_STATE_ATTACHED;\n\n    if (!this.element) {\n      const component = this.component;\n      this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n    }\n  }\n  /**\n   * DOM WRITE\n   */\n\n\n  _destroy() {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    const element = this.element;\n\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      } else {\n        element.remove();\n      }\n    }\n\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  }\n\n}\n\nconst matches = (view, id, params) => {\n  if (!view) {\n    return false;\n  }\n\n  if (view.component !== id) {\n    return false;\n  }\n\n  const currentParams = view.params;\n\n  if (currentParams === params) {\n    return true;\n  }\n\n  if (!currentParams && !params) {\n    return true;\n  }\n\n  if (!currentParams || !params) {\n    return false;\n  }\n\n  const keysA = Object.keys(currentParams);\n  const keysB = Object.keys(params);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (const key of keysA) {\n    if (currentParams[key] !== params[key]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst convertToView = (page, params) => {\n  if (!page) {\n    return null;\n  }\n\n  if (page instanceof ViewController) {\n    return page;\n  }\n\n  return new ViewController(page, params);\n};\n\nconst convertToViews = pages => {\n  return pages.map(page => {\n    if (page instanceof ViewController) {\n      return page;\n    }\n\n    if ('page' in page) {\n      return convertToView(page.page, page.params);\n    }\n\n    return convertToView(page, undefined);\n  }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\nconst Nav = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n\n    this.animated = true;\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n  }\n\n  swipeGestureChanged() {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  }\n\n  rootChanged() {\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n    }\n  }\n\n  componentWillLoad() {\n    this.useRouter = !!document.querySelector('ion-router') && !this.el.closest('[no-router]');\n\n    if (this.swipeGesture === undefined) {\n      const mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n\n    this.ionNavWillLoad.emit();\n  }\n\n  async componentDidLoad() {\n    this.rootChanged();\n    this.gesture = (await import('./swipe-back-69ef585b.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n    this.swipeGestureChanged();\n  }\n\n  componentDidUnload() {\n    for (const view of this.views) {\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n\n      view._destroy();\n    }\n\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    } // release swipe back gesture and transition\n\n\n    this.transInstr.length = this.views.length = 0;\n    this.destroyed = true;\n  }\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  push(component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: -1,\n      insertViews: [{\n        page: component,\n        params: componentProps\n      }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  insert(insertIndex, component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: [{\n        page: component,\n        params: componentProps\n      }],\n      opts\n    }, done);\n  }\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  insertPages(insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts\n    }, done);\n  }\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  pop(opts, done) {\n    return this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts\n    }, done);\n  }\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  popTo(indexOrViewCtrl, opts, done) {\n    const tiConfig = {\n      removeStart: -1,\n      removeCount: -1,\n      opts\n    };\n\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      tiConfig.removeView = indexOrViewCtrl;\n      tiConfig.removeStart = 1;\n    } else if (typeof indexOrViewCtrl === 'number') {\n      tiConfig.removeStart = indexOrViewCtrl + 1;\n    }\n\n    return this.queueTrns(tiConfig, done);\n  }\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  popToRoot(opts, done) {\n    return this.queueTrns({\n      removeStart: 1,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  removeIndex(startIndex, removeCount = 1, opts, done) {\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount,\n      opts\n    }, done);\n  }\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  setRoot(component, componentProps, opts, done) {\n    return this.setPages([{\n      page: component,\n      params: componentProps\n    }], opts, done);\n  }\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  setPages(views, opts, done) {\n    if (opts == null) {\n      opts = {};\n    } // if animation wasn't set to true then default it to NOT animate\n\n\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts\n    }, done);\n  }\n  /** @internal */\n\n\n  setRouteId(id, params, direction) {\n    const active = this.getActiveSync();\n\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n\n    let resolve;\n    const promise = new Promise(r => resolve = r);\n    let finish;\n    const commonOpts = {\n      updateURL: false,\n      viewIsReady: enteringEl => {\n        let mark;\n        const p = new Promise(r => mark = r);\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: async () => {\n            mark();\n            await finish;\n          }\n        });\n        return p;\n      }\n    };\n\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    } else {\n      const viewController = this.views.find(v => matches(v, id, params));\n\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back'\n        }));\n      } else if (direction === 'forward') {\n        finish = this.push(id, params, commonOpts);\n      } else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animated: true\n        }));\n      }\n    }\n\n    return promise;\n  }\n  /** @internal */\n\n\n  async getRouteId() {\n    const active = this.getActiveSync();\n    return active ? {\n      id: active.element.tagName,\n      params: active.params,\n      element: active.element\n    } : undefined;\n  }\n  /**\n   * Get the active view.\n   */\n\n\n  getActive() {\n    return Promise.resolve(this.getActiveSync());\n  }\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n\n\n  getByIndex(index) {\n    return Promise.resolve(this.views[index]);\n  }\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n\n\n  canGoBack(view) {\n    return Promise.resolve(this.canGoBackSync(view));\n  }\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n\n\n  getPrevious(view) {\n    return Promise.resolve(this.getPreviousSync(view));\n  }\n\n  getLength() {\n    return this.views.length;\n  }\n\n  getActiveSync() {\n    return this.views[this.views.length - 1];\n  }\n\n  canGoBackSync(view = this.getActiveSync()) {\n    return !!(view && this.getPreviousSync(view));\n  }\n\n  getPreviousSync(view = this.getActiveSync()) {\n    if (!view) {\n      return undefined;\n    }\n\n    const views = this.views;\n    const index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  } // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n  // 1. _nextTrns(): consumes the next transition in the queue\n  // 2. _viewInit(): initializes enteringView if required\n  // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n  // 4. _postViewInit(): add/remove the views from the navigation stack\n  // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n  // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n  // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n  // 8. _transitionFinish(): called once the transition finishes\n  // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n\n\n  queueTrns(ti, done) {\n    if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n      return Promise.resolve(false);\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done; // Normalize empty\n\n    if (ti.insertViews && ti.insertViews.length === 0) {\n      ti.insertViews = undefined;\n    } // Enqueue transition instruction\n\n\n    this.transInstr.push(ti); // if there isn't a transition already happening\n    // then this will kick off this transition\n\n    this.nextTrns();\n    return promise;\n  }\n\n  success(result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n\n    ti.resolve(result.hasCompleted);\n\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      const router = document.querySelector('ion-router');\n\n      if (router) {\n        const direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  }\n\n  failed(rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  }\n\n  fireError(rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    } else {\n      ti.resolve(false);\n    }\n  }\n\n  nextTrns() {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    } // there is no transition happening right now\n    // get the next instruction\n\n\n    const ti = this.transInstr.shift();\n\n    if (!ti) {\n      return false;\n    }\n\n    this.runTransition(ti);\n    return true;\n  }\n\n  async runTransition(ti) {\n    try {\n      // set that this nav is actively transitioning\n      this.ionNavWillChange.emit();\n      this.isTransitioning = true;\n      this.prepareTI(ti);\n      const leavingView = this.getActiveSync();\n      const enteringView = this.getEnteringView(ti, leavingView);\n\n      if (!leavingView && !enteringView) {\n        throw new Error('no views in the stack to be removed');\n      }\n\n      if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n        await enteringView.init(this.el);\n      }\n\n      this.postViewInit(enteringView, leavingView, ti); // Needs transition?\n\n      const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n      const result = requiresTransition ? await this.transition(enteringView, leavingView, ti) : {\n        // transition is not required, so we are already done!\n        // they're inserting/removing the views somewhere in the middle or\n        // beginning, so visually nothing needs to animate/transition\n        // resolve immediately because there's no animation that's happening\n        hasCompleted: true,\n        requiresTransition: false\n      };\n      this.success(result, ti);\n      this.ionNavDidChange.emit();\n    } catch (rejectReason) {\n      this.failed(rejectReason, ti);\n    }\n\n    this.isTransitioning = false;\n    this.nextTrns();\n  }\n\n  prepareTI(ti) {\n    const viewsLength = this.views.length;\n    ti.opts = ti.opts || {};\n\n    if (ti.opts.delegate === undefined) {\n      ti.opts.delegate = this.delegate;\n    }\n\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      const index = this.views.indexOf(ti.removeView);\n\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n\n      ti.removeStart += index;\n    }\n\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n\n    const insertViews = ti.insertViews;\n\n    if (!insertViews) {\n      return;\n    }\n\n    assert(insertViews.length > 0, 'length can not be zero');\n    const viewControllers = convertToViews(insertViews);\n\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    } // Check all the inserted view are correct\n\n\n    for (const view of viewControllers) {\n      view.delegate = ti.opts.delegate;\n      const nav = view.nav;\n\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n\n    ti.insertViews = viewControllers;\n  }\n\n  getEnteringView(ti, leavingView) {\n    const insertViews = ti.insertViews;\n\n    if (insertViews !== undefined) {\n      // grab the very last view of the views to be inserted\n      // and initialize it as the new entering view\n      return insertViews[insertViews.length - 1];\n    }\n\n    const removeStart = ti.removeStart;\n\n    if (removeStart !== undefined) {\n      const views = this.views;\n      const removeEnd = removeStart + ti.removeCount;\n\n      for (let i = views.length - 1; i >= 0; i--) {\n        const view = views[i];\n\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  postViewInit(enteringView, leavingView, ti) {\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    const opts = ti.opts;\n    const insertViews = ti.insertViews;\n    const removeStart = ti.removeStart;\n    const removeCount = ti.removeCount;\n    let destroyQueue; // there are views to remove\n\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n\n      for (let i = 0; i < removeCount; i++) {\n        const view = this.views[i + removeStart];\n\n        if (view && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      } // default the direction to \"back\"\n\n\n      opts.direction = opts.direction || 'back';\n    }\n\n    const finalBalance = this.views.length + (insertViews !== undefined ? insertViews.length : 0) - (removeCount !== undefined ? removeCount : 0);\n    assert(finalBalance >= 0, 'final balance can not be negative');\n\n    if (finalBalance === 0) {\n      console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    } // At this point the transition can not be rejected, any throw should be an error\n    // there are views to insert\n\n\n    if (insertViews) {\n      // add the views to the\n      let insertIndex = ti.insertStart;\n\n      for (const view of insertViews) {\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        opts.direction = opts.direction || 'forward';\n      }\n    } // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n\n\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (const view of destroyQueue) {\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      } // once all lifecycle events has been delivered, we can safely detroy the views\n\n\n      for (const view of destroyQueue) {\n        this.destroyView(view);\n      }\n    }\n  }\n\n  async transition(enteringView, leavingView, ti) {\n    // we should animate (duration > 0) if the pushed page is not the first one (startup)\n    // or if it is a portal (modal, actionsheet, etc.)\n    const opts = ti.opts;\n    const progressCallback = opts.progressAnimation ? ani => this.sbAni = ani : undefined;\n    const mode = getIonMode(this);\n    const enteringEl = enteringView.element;\n    const leavingEl = leavingView && leavingView.element;\n    const animationOpts = Object.assign({\n      mode,\n      showGoBack: this.canGoBackSync(enteringView),\n      baseEl: this.el,\n      animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'),\n      progressCallback,\n      animated: this.animated && config.getBoolean('animated', true),\n      enteringEl,\n      leavingEl\n    }, opts);\n    const {\n      hasCompleted\n    } = await transition(animationOpts);\n    return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n  }\n\n  transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n    const cleanupView = hasCompleted ? enteringView : leavingView;\n\n    if (cleanupView) {\n      this.cleanup(cleanupView);\n    }\n\n    return {\n      hasCompleted,\n      requiresTransition: true,\n      enteringView,\n      leavingView,\n      direction: opts.direction\n    };\n  }\n\n  insertViewAt(view, index) {\n    const views = this.views;\n    const existingIndex = views.indexOf(view);\n\n    if (existingIndex > -1) {\n      // this view is already in the stack!!\n      // move it to its new location\n      assert(view.nav === this, 'view is not part of the nav');\n      views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n    } else {\n      assert(!view.nav, 'nav is used'); // this is a new view to add to the stack\n      // create the new entering view\n\n      view.nav = this; // insert the entering view into the correct index in the stack\n\n      views.splice(index, 0, view);\n    }\n  }\n\n  removeView(view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    const views = this.views;\n    const index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  }\n\n  destroyView(view) {\n    view._destroy();\n\n    this.removeView(view);\n  }\n  /**\n   * DOM WRITE\n   */\n\n\n  cleanup(activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n\n    const views = this.views;\n    const activeViewIndex = views.indexOf(activeView);\n\n    for (let i = views.length - 1; i >= 0; i--) {\n      const view = views[i];\n      const element = view.element;\n\n      if (i > activeViewIndex) {\n        // this view comes after the active view\n        // let's unload it\n        lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n        this.destroyView(view);\n      } else if (i < activeViewIndex) {\n        // this view comes before the active view\n        // and it is not a portal then ensure it is hidden\n        setPageHidden(element, true);\n      }\n    }\n  }\n\n  canStart() {\n    return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();\n  }\n\n  onStart() {\n    this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts: {\n        direction: 'back',\n        progressAnimation: true\n      }\n    }, undefined);\n  }\n\n  onMove(stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  }\n\n  onEnd(shouldComplete, stepValue, dur) {\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(() => {\n        this.animationEnabled = true;\n      }, {\n        oneTimeCallback: true\n      }); // Account for rounding errors in JS\n\n      let newStepValue = shouldComplete ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      } else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  }\n\n  render() {\n    return h(\"slot\", null);\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"swipeGesture\": [\"swipeGestureChanged\"],\n      \"root\": [\"rootChanged\"]\n    };\n  }\n\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps) => {\n  const nav = el.closest('ion-nav');\n\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, {\n          skipIfBusy: true\n        });\n      }\n    } else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, {\n          skipIfBusy: true\n        });\n      }\n    } else if (routerDirection === 'back') {\n      return nav.pop({\n        skipIfBusy: true\n      });\n    }\n  }\n\n  return Promise.resolve(false);\n};\n\nconst NavLink = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n\n    this.routerDirection = 'forward';\n\n    this.onClick = () => {\n      return navLink(this.el, this.routerDirection, this.component, this.componentProps);\n    };\n  }\n\n  render() {\n    return h(Host, {\n      onClick: this.onClick\n    });\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n};\nexport { Nav as ion_nav, NavLink as ion_nav_link };","map":{"version":3,"sources":["/home/joel/projecteionic/node_modules/@ionic/core/dist/esm-es5/ion-nav_2.entry.js"],"names":["r","registerInstance","d","createEvent","h","e","getElement","H","Host","b","getIonMode","c","config","assert","l","lifecycle","t","transition","s","setPageHidden","LIFECYCLE_WILL_UNLOAD","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","g","getTimeGivenProgression","a","attachComponent","VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","constructor","component","params","state","init","container","element","delegate","_destroy","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","currentParams","keysA","Object","keys","keysB","length","key","convertToView","page","convertToViews","pages","map","filter","v","navCss","Nav","hostRef","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","ionNavWillLoad","ionNavWillChange","ionNavDidChange","swipeGestureChanged","gesture","enable","swipeGesture","rootChanged","root","setRoot","rootParams","componentWillLoad","document","querySelector","el","closest","mode","getBoolean","emit","componentDidLoad","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","componentDidUnload","destroy","push","componentProps","opts","done","queueTrns","insertStart","insertViews","insert","insertIndex","insertPages","insertComponents","pop","removeStart","removeCount","popTo","indexOrViewCtrl","tiConfig","removeView","popToRoot","removeIndex","startIndex","setPages","setRouteId","direction","active","getActiveSync","Promise","resolve","changed","promise","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","viewController","find","assign","getRouteId","tagName","getActive","getByIndex","index","canGoBack","canGoBackSync","getPrevious","getPreviousSync","getLength","indexOf","ti","skipIfBusy","reject","nextTrns","success","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","router","navChanged","failed","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","postViewInit","enteringRequiresTransition","leavingRequiresTransition","viewsLength","viewControllers","removeEnd","i","destroyQueue","finalBalance","console","warn","insertViewAt","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","animationBuilder","animation","get","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","easing","progressEnd","render","watchers","style","navLink","routerDirection","NavLink","onClick","ion_nav","ion_nav_link"],"mappings":"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","sourcesContent":["import { r as registerInstance, d as createEvent, h, e as getElement, H as Host } from './index-2cd7e630.js';\nimport { b as getIonMode, c as config } from './ionic-global-a175fa73.js';\nimport { b as assert } from './helpers-d8b49b57.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-157155ee.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-685f606a.js';\nimport { a as attachComponent } from './framework-delegate-d1eb6504.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n    constructor(component, params) {\n        this.component = component;\n        this.params = params;\n        this.state = VIEW_STATE_NEW;\n    }\n    async init(container) {\n        this.state = VIEW_STATE_ATTACHED;\n        if (!this.element) {\n            const component = this.component;\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n        }\n    }\n    /**\n     * DOM WRITE\n     */\n    _destroy() {\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n        const element = this.element;\n        if (element) {\n            if (this.delegate) {\n                this.delegate.removeViewFromDom(element.parentElement, element);\n            }\n            else {\n                element.remove();\n            }\n        }\n        this.nav = undefined;\n        this.state = VIEW_STATE_DESTROYED;\n    }\n}\nconst matches = (view, id, params) => {\n    if (!view) {\n        return false;\n    }\n    if (view.component !== id) {\n        return false;\n    }\n    const currentParams = view.params;\n    if (currentParams === params) {\n        return true;\n    }\n    if (!currentParams && !params) {\n        return true;\n    }\n    if (!currentParams || !params) {\n        return false;\n    }\n    const keysA = Object.keys(currentParams);\n    const keysB = Object.keys(params);\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    // Test for A's keys different from B.\n    for (const key of keysA) {\n        if (currentParams[key] !== params[key]) {\n            return false;\n        }\n    }\n    return true;\n};\nconst convertToView = (page, params) => {\n    if (!page) {\n        return null;\n    }\n    if (page instanceof ViewController) {\n        return page;\n    }\n    return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n    return pages.map(page => {\n        if (page instanceof ViewController) {\n            return page;\n        }\n        if ('page' in page) {\n            return convertToView(page.page, page.params);\n        }\n        return convertToView(page, undefined);\n    }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.transInstr = [];\n        this.animationEnabled = true;\n        this.useRouter = false;\n        this.isTransitioning = false;\n        this.destroyed = false;\n        this.views = [];\n        /**\n         * If `true`, the nav should animate the transition of components.\n         */\n        this.animated = true;\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    }\n    swipeGestureChanged() {\n        if (this.gesture) {\n            this.gesture.enable(this.swipeGesture === true);\n        }\n    }\n    rootChanged() {\n        if (this.root !== undefined) {\n            if (!this.useRouter) {\n                this.setRoot(this.root, this.rootParams);\n            }\n        }\n    }\n    componentWillLoad() {\n        this.useRouter =\n            !!document.querySelector('ion-router') &&\n                !this.el.closest('[no-router]');\n        if (this.swipeGesture === undefined) {\n            const mode = getIonMode(this);\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n        }\n        this.ionNavWillLoad.emit();\n    }\n    async componentDidLoad() {\n        this.rootChanged();\n        this.gesture = (await import('./swipe-back-69ef585b.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n        this.swipeGestureChanged();\n    }\n    componentDidUnload() {\n        for (const view of this.views) {\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            view._destroy();\n        }\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        // release swipe back gesture and transition\n        this.transInstr.length = this.views.length = 0;\n        this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    push(component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: -1,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insert(insertIndex, component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insertPages(insertIndex, insertComponents, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: insertComponents,\n            opts\n        }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    pop(opts, done) {\n        return this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts\n        }, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popTo(indexOrViewCtrl, opts, done) {\n        const tiConfig = {\n            removeStart: -1,\n            removeCount: -1,\n            opts\n        };\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n            tiConfig.removeView = indexOrViewCtrl;\n            tiConfig.removeStart = 1;\n        }\n        else if (typeof indexOrViewCtrl === 'number') {\n            tiConfig.removeStart = indexOrViewCtrl + 1;\n        }\n        return this.queueTrns(tiConfig, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popToRoot(opts, done) {\n        return this.queueTrns({\n            removeStart: 1,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    removeIndex(startIndex, removeCount = 1, opts, done) {\n        return this.queueTrns({\n            removeStart: startIndex,\n            removeCount,\n            opts\n        }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setRoot(component, componentProps, opts, done) {\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setPages(views, opts, done) {\n        if (opts == null) {\n            opts = {};\n        }\n        // if animation wasn't set to true then default it to NOT animate\n        if (opts.animated !== true) {\n            opts.animated = false;\n        }\n        return this.queueTrns({\n            insertStart: 0,\n            insertViews: views,\n            removeStart: 0,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /** @internal */\n    setRouteId(id, params, direction) {\n        const active = this.getActiveSync();\n        if (matches(active, id, params)) {\n            return Promise.resolve({\n                changed: false,\n                element: active.element\n            });\n        }\n        let resolve;\n        const promise = new Promise(r => (resolve = r));\n        let finish;\n        const commonOpts = {\n            updateURL: false,\n            viewIsReady: enteringEl => {\n                let mark;\n                const p = new Promise(r => (mark = r));\n                resolve({\n                    changed: true,\n                    element: enteringEl,\n                    markVisible: async () => {\n                        mark();\n                        await finish;\n                    }\n                });\n                return p;\n            }\n        };\n        if (direction === 'root') {\n            finish = this.setRoot(id, params, commonOpts);\n        }\n        else {\n            const viewController = this.views.find(v => matches(v, id, params));\n            if (viewController) {\n                finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back' }));\n            }\n            else if (direction === 'forward') {\n                finish = this.push(id, params, commonOpts);\n            }\n            else if (direction === 'back') {\n                finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true }));\n            }\n        }\n        return promise;\n    }\n    /** @internal */\n    async getRouteId() {\n        const active = this.getActiveSync();\n        return active\n            ? {\n                id: active.element.tagName,\n                params: active.params,\n                element: active.element\n            }\n            : undefined;\n    }\n    /**\n     * Get the active view.\n     */\n    getActive() {\n        return Promise.resolve(this.getActiveSync());\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n    getByIndex(index) {\n        return Promise.resolve(this.views[index]);\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n    canGoBack(view) {\n        return Promise.resolve(this.canGoBackSync(view));\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n    getPrevious(view) {\n        return Promise.resolve(this.getPreviousSync(view));\n    }\n    getLength() {\n        return this.views.length;\n    }\n    getActiveSync() {\n        return this.views[this.views.length - 1];\n    }\n    canGoBackSync(view = this.getActiveSync()) {\n        return !!(view && this.getPreviousSync(view));\n    }\n    getPreviousSync(view = this.getActiveSync()) {\n        if (!view) {\n            return undefined;\n        }\n        const views = this.views;\n        const index = views.indexOf(view);\n        return index > 0 ? views[index - 1] : undefined;\n    }\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n    queueTrns(ti, done) {\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n            return Promise.resolve(false);\n        }\n        const promise = new Promise((resolve, reject) => {\n            ti.resolve = resolve;\n            ti.reject = reject;\n        });\n        ti.done = done;\n        // Normalize empty\n        if (ti.insertViews && ti.insertViews.length === 0) {\n            ti.insertViews = undefined;\n        }\n        // Enqueue transition instruction\n        this.transInstr.push(ti);\n        // if there isn't a transition already happening\n        // then this will kick off this transition\n        this.nextTrns();\n        return promise;\n    }\n    success(result, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        if (ti.done) {\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n        }\n        ti.resolve(result.hasCompleted);\n        if (ti.opts.updateURL !== false && this.useRouter) {\n            const router = document.querySelector('ion-router');\n            if (router) {\n                const direction = result.direction === 'back' ? 'back' : 'forward';\n                router.navChanged(direction);\n            }\n        }\n    }\n    failed(rejectReason, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        this.transInstr.length = 0;\n        this.fireError(rejectReason, ti);\n    }\n    fireError(rejectReason, ti) {\n        if (ti.done) {\n            ti.done(false, false, rejectReason);\n        }\n        if (ti.reject && !this.destroyed) {\n            ti.reject(rejectReason);\n        }\n        else {\n            ti.resolve(false);\n        }\n    }\n    nextTrns() {\n        // this is the framework's bread 'n butta function\n        // only one transition is allowed at any given time\n        if (this.isTransitioning) {\n            return false;\n        }\n        // there is no transition happening right now\n        // get the next instruction\n        const ti = this.transInstr.shift();\n        if (!ti) {\n            return false;\n        }\n        this.runTransition(ti);\n        return true;\n    }\n    async runTransition(ti) {\n        try {\n            // set that this nav is actively transitioning\n            this.ionNavWillChange.emit();\n            this.isTransitioning = true;\n            this.prepareTI(ti);\n            const leavingView = this.getActiveSync();\n            const enteringView = this.getEnteringView(ti, leavingView);\n            if (!leavingView && !enteringView) {\n                throw new Error('no views in the stack to be removed');\n            }\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n                await enteringView.init(this.el);\n            }\n            this.postViewInit(enteringView, leavingView, ti);\n            // Needs transition?\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n                enteringView !== leavingView;\n            const result = requiresTransition\n                ? await this.transition(enteringView, leavingView, ti)\n                : {\n                    // transition is not required, so we are already done!\n                    // they're inserting/removing the views somewhere in the middle or\n                    // beginning, so visually nothing needs to animate/transition\n                    // resolve immediately because there's no animation that's happening\n                    hasCompleted: true,\n                    requiresTransition: false\n                };\n            this.success(result, ti);\n            this.ionNavDidChange.emit();\n        }\n        catch (rejectReason) {\n            this.failed(rejectReason, ti);\n        }\n        this.isTransitioning = false;\n        this.nextTrns();\n    }\n    prepareTI(ti) {\n        const viewsLength = this.views.length;\n        ti.opts = ti.opts || {};\n        if (ti.opts.delegate === undefined) {\n            ti.opts.delegate = this.delegate;\n        }\n        if (ti.removeView !== undefined) {\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n            const index = this.views.indexOf(ti.removeView);\n            if (index < 0) {\n                throw new Error('removeView was not found');\n            }\n            ti.removeStart += index;\n        }\n        if (ti.removeStart !== undefined) {\n            if (ti.removeStart < 0) {\n                ti.removeStart = viewsLength - 1;\n            }\n            if (ti.removeCount < 0) {\n                ti.removeCount = viewsLength - ti.removeStart;\n            }\n            ti.leavingRequiresTransition =\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n        }\n        if (ti.insertViews) {\n            // allow -1 to be passed in to auto push it on the end\n            // and clean up the index if it's larger then the size of the stack\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n                ti.insertStart = viewsLength;\n            }\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n        }\n        const insertViews = ti.insertViews;\n        if (!insertViews) {\n            return;\n        }\n        assert(insertViews.length > 0, 'length can not be zero');\n        const viewControllers = convertToViews(insertViews);\n        if (viewControllers.length === 0) {\n            throw new Error('invalid views to insert');\n        }\n        // Check all the inserted view are correct\n        for (const view of viewControllers) {\n            view.delegate = ti.opts.delegate;\n            const nav = view.nav;\n            if (nav && nav !== this) {\n                throw new Error('inserted view was already inserted');\n            }\n            if (view.state === VIEW_STATE_DESTROYED) {\n                throw new Error('inserted view was already destroyed');\n            }\n        }\n        ti.insertViews = viewControllers;\n    }\n    getEnteringView(ti, leavingView) {\n        const insertViews = ti.insertViews;\n        if (insertViews !== undefined) {\n            // grab the very last view of the views to be inserted\n            // and initialize it as the new entering view\n            return insertViews[insertViews.length - 1];\n        }\n        const removeStart = ti.removeStart;\n        if (removeStart !== undefined) {\n            const views = this.views;\n            const removeEnd = removeStart + ti.removeCount;\n            for (let i = views.length - 1; i >= 0; i--) {\n                const view = views[i];\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n                    return view;\n                }\n            }\n        }\n        return undefined;\n    }\n    postViewInit(enteringView, leavingView, ti) {\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n        assert(ti.resolve, 'resolve must be valid');\n        assert(ti.reject, 'reject must be valid');\n        const opts = ti.opts;\n        const insertViews = ti.insertViews;\n        const removeStart = ti.removeStart;\n        const removeCount = ti.removeCount;\n        let destroyQueue;\n        // there are views to remove\n        if (removeStart !== undefined && removeCount !== undefined) {\n            assert(removeStart >= 0, 'removeStart can not be negative');\n            assert(removeCount >= 0, 'removeCount can not be negative');\n            destroyQueue = [];\n            for (let i = 0; i < removeCount; i++) {\n                const view = this.views[i + removeStart];\n                if (view && view !== enteringView && view !== leavingView) {\n                    destroyQueue.push(view);\n                }\n            }\n            // default the direction to \"back\"\n            opts.direction = opts.direction || 'back';\n        }\n        const finalBalance = this.views.length +\n            (insertViews !== undefined ? insertViews.length : 0) -\n            (removeCount !== undefined ? removeCount : 0);\n        assert(finalBalance >= 0, 'final balance can not be negative');\n        if (finalBalance === 0) {\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n            throw new Error('navigation stack needs at least one root page');\n        }\n        // At this point the transition can not be rejected, any throw should be an error\n        // there are views to insert\n        if (insertViews) {\n            // add the views to the\n            let insertIndex = ti.insertStart;\n            for (const view of insertViews) {\n                this.insertViewAt(view, insertIndex);\n                insertIndex++;\n            }\n            if (ti.enteringRequiresTransition) {\n                // default to forward if not already set\n                opts.direction = opts.direction || 'forward';\n            }\n        }\n        // if the views to be removed are in the beginning or middle\n        // and there is not a view that needs to visually transition out\n        // then just destroy them and don't transition anything\n        // batch all of lifecycles together\n        // let's make sure, callbacks are zoned\n        if (destroyQueue && destroyQueue.length > 0) {\n            for (const view of destroyQueue) {\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            }\n            // once all lifecycle events has been delivered, we can safely detroy the views\n            for (const view of destroyQueue) {\n                this.destroyView(view);\n            }\n        }\n    }\n    async transition(enteringView, leavingView, ti) {\n        // we should animate (duration > 0) if the pushed page is not the first one (startup)\n        // or if it is a portal (modal, actionsheet, etc.)\n        const opts = ti.opts;\n        const progressCallback = opts.progressAnimation\n            ? (ani) => this.sbAni = ani\n            : undefined;\n        const mode = getIonMode(this);\n        const enteringEl = enteringView.element;\n        const leavingEl = leavingView && leavingView.element;\n        const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n            leavingEl }, opts);\n        const { hasCompleted } = await transition(animationOpts);\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    }\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n        const cleanupView = hasCompleted ? enteringView : leavingView;\n        if (cleanupView) {\n            this.cleanup(cleanupView);\n        }\n        return {\n            hasCompleted,\n            requiresTransition: true,\n            enteringView,\n            leavingView,\n            direction: opts.direction\n        };\n    }\n    insertViewAt(view, index) {\n        const views = this.views;\n        const existingIndex = views.indexOf(view);\n        if (existingIndex > -1) {\n            // this view is already in the stack!!\n            // move it to its new location\n            assert(view.nav === this, 'view is not part of the nav');\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n        }\n        else {\n            assert(!view.nav, 'nav is used');\n            // this is a new view to add to the stack\n            // create the new entering view\n            view.nav = this;\n            // insert the entering view into the correct index in the stack\n            views.splice(index, 0, view);\n        }\n    }\n    removeView(view) {\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n        const views = this.views;\n        const index = views.indexOf(view);\n        assert(index > -1, 'view must be part of the stack');\n        if (index >= 0) {\n            views.splice(index, 1);\n        }\n    }\n    destroyView(view) {\n        view._destroy();\n        this.removeView(view);\n    }\n    /**\n     * DOM WRITE\n     */\n    cleanup(activeView) {\n        // ok, cleanup time!! Destroy all of the views that are\n        // INACTIVE and come after the active view\n        // only do this if the views exist, though\n        if (this.destroyed) {\n            return;\n        }\n        const views = this.views;\n        const activeViewIndex = views.indexOf(activeView);\n        for (let i = views.length - 1; i >= 0; i--) {\n            const view = views[i];\n            const element = view.element;\n            if (i > activeViewIndex) {\n                // this view comes after the active view\n                // let's unload it\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n                this.destroyView(view);\n            }\n            else if (i < activeViewIndex) {\n                // this view comes before the active view\n                // and it is not a portal then ensure it is hidden\n                setPageHidden(element, true);\n            }\n        }\n    }\n    canStart() {\n        return (!!this.swipeGesture &&\n            !this.isTransitioning &&\n            this.transInstr.length === 0 &&\n            this.animationEnabled &&\n            this.canGoBackSync());\n    }\n    onStart() {\n        this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts: {\n                direction: 'back',\n                progressAnimation: true\n            }\n        }, undefined);\n    }\n    onMove(stepValue) {\n        if (this.sbAni) {\n            this.sbAni.progressStep(stepValue);\n        }\n    }\n    onEnd(shouldComplete, stepValue, dur) {\n        if (this.sbAni) {\n            this.animationEnabled = false;\n            this.sbAni.onFinish(() => {\n                this.animationEnabled = true;\n            }, { oneTimeCallback: true });\n            // Account for rounding errors in JS\n            let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n            /**\n             * Animation will be reversed here, so need to\n             * reverse the easing curve as well\n             *\n             * Additionally, we need to account for the time relative\n             * to the new easing curve, as `stepValue` is going to be given\n             * in terms of a linear curve.\n             */\n            if (!shouldComplete) {\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n                newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n            }\n            else {\n                newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n            }\n            this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n        }\n    }\n    render() {\n        return (h(\"slot\", null));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n    }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps) => {\n    const nav = el.closest('ion-nav');\n    if (nav) {\n        if (routerDirection === 'forward') {\n            if (component !== undefined) {\n                return nav.push(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'root') {\n            if (component !== undefined) {\n                return nav.setRoot(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'back') {\n            return nav.pop({ skipIfBusy: true });\n        }\n    }\n    return Promise.resolve(false);\n};\n\nconst NavLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * The transition direction when navigating to another page.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = () => {\n            return navLink(this.el, this.routerDirection, this.component, this.componentProps);\n        };\n    }\n    render() {\n        return (h(Host, { onClick: this.onClick }));\n    }\n    get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"]},"metadata":{},"sourceType":"module"}