{"ast":null,"code":"var _jsxFileName = \"/home/joel/projecteionic/src/data/ActivitiesContextProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport * as $ from 'jquery';\nimport ActivitiesContext from './activities-context';\n\nconst ActivitiesContextProvider = props => {\n  _s();\n\n  const [activities, setActivities] = useState([{\n    id: Math.random().toString(),\n    title: 'My daily sleep',\n    description: 'Sleep through the night after a day of quarantine',\n    hour: '23:00',\n    activityType: 'rest',\n    imageUrl: '/assets/images/rest.jpg',\n    isCompleted: false\n  }, {\n    id: Math.random().toString(),\n    title: 'Hard work',\n    description: 'Work in the projects I have at Tribalyte',\n    hour: '9:00',\n    activityType: 'work',\n    imageUrl: '/assets/images/work.jpg',\n    isCompleted: false\n  }, {\n    id: Math.random().toString(),\n    title: 'Play ping pong',\n    description: 'Play a ping pong match on the hall table!',\n    hour: '19:00',\n    activityType: 'hobby',\n    imageUrl: '/assets/images/hobby.jpg',\n    isCompleted: false\n  }]);\n\n  const ObtenirPersones = professor => {\n    var persones = Array();\n    $.ajax({\n      method: \"GET\",\n      url: \"http://192.168.2.212/ProjecteGit/Api/persona/json.php?professor=\" + (professor ? 1 : 0)\n    }).done(function (res) {\n      $.each(res.records, function (i, item) {\n        persones.push({\n          codi: item.codi,\n          Nom: item.Nom,\n          Cognoms: item.Cognoms,\n          professor: item.professor\n        });\n      });\n\n      if (professor) {\n        setProfessors(currProfessors => {\n          return persones;\n        });\n      } else {\n        setAlumnes(currProfessors => {\n          return persones;\n        });\n      }\n    });\n  };\n\n  const Login = (email, password) => {\n    $.ajax({\n      method: \"POST\",\n      url: \"http://192.168.2.212/ProjecteGit/JWT/login.php\",\n      data: {\n        email: email,\n        password: password\n      }\n    }).done(function (res) {\n      if (res.jwt) {}\n    }).error(function (res) {\n      debugger;\n    });\n  };\n\n  const Registrar = (nom, cognom, email, password) => {\n    $.ajax({\n      method: \"POST\",\n      url: \"http://192.168.2.212/ProjecteGit/JWT/create_user.php\",\n      data: {\n        firstname: nom,\n        lastname: cognom,\n        email: email,\n        password: password\n      }\n    }).done(function (res) {\n      if (res.jwt) {}\n    });\n  };\n\n  const [professors, setProfessors] = useState([]);\n  const [alumnes, setAlumnes] = useState([]);\n\n  const addActivity = (title, description, activityType) => {\n    let imageUrl = '';\n\n    switch (activityType) {\n      case 'rest':\n        imageUrl = '/assets/images/rest.jpg';\n        break;\n\n      case 'hobby':\n        imageUrl = '/assets/images/hobby.jpg';\n        break;\n\n      case 'work':\n        imageUrl = '/assets/images/work.jpg';\n        break;\n\n      default:\n        imageUrl = '/assets/images/work.jpg';\n        break;\n    }\n\n    ;\n    const activityDate = new Date();\n    const hour = activityDate.getHours() + ':' + activityDate.getMinutes();\n    const addActivity = {\n      id: Math.random().toString(),\n      title,\n      description,\n      hour,\n      activityType,\n      imageUrl,\n      isCompleted: false\n    };\n    setActivities(currActivities => {\n      return [...currActivities, addActivity];\n    });\n  };\n\n  const completeActivity = activityId => {\n    setActivities(currActivities => {\n      const updatedActivities = [...currActivities];\n      const selectedActivityIndex = activities.findIndex(act => act.id === activityId);\n      const updatedActivity = { ...updatedActivities[selectedActivityIndex],\n        isCompleted: true\n      };\n      updatedActivities[selectedActivityIndex] = updatedActivity;\n      return updatedActivities;\n    });\n  };\n\n  const jwt = '';\n  const activitiesContext = {\n    activities,\n    addActivity,\n    completeActivity,\n    alumnes,\n    professors,\n    ObtenirPersones,\n    jwt,\n    Login,\n    Registrar\n  };\n  return /*#__PURE__*/React.createElement(ActivitiesContext.Provider, {\n    value: activitiesContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, props.children);\n};\n\n_s(ActivitiesContextProvider, \"d/Y+MdLzncu2a7aBRggTFro33A0=\");\n\n_c = ActivitiesContextProvider;\nexport default ActivitiesContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ActivitiesContextProvider\");","map":{"version":3,"sources":["/home/joel/projecteionic/src/data/ActivitiesContextProvider.tsx"],"names":["React","useState","$","ActivitiesContext","ActivitiesContextProvider","props","activities","setActivities","id","Math","random","toString","title","description","hour","activityType","imageUrl","isCompleted","ObtenirPersones","professor","persones","Array","ajax","method","url","done","res","each","records","i","item","push","codi","Nom","Cognoms","setProfessors","currProfessors","setAlumnes","Login","email","password","data","jwt","error","Registrar","nom","cognom","firstname","lastname","professors","alumnes","addActivity","activityDate","Date","getHours","getMinutes","currActivities","completeActivity","activityId","updatedActivities","selectedActivityIndex","findIndex","act","updatedActivity","activitiesContext","children"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport * as $ from 'jquery'\nimport ActivitiesContext, { Activity, ActivitiesContextModel, ActivityType, Persona, LoginReturn } from './activities-context';\n\nconst ActivitiesContextProvider: React.FC = (props) => {\n\n    const [activities, setActivities] = useState<Activity[]>([\n        {\n            id: Math.random().toString(),\n            title: 'My daily sleep',\n            description: 'Sleep through the night after a day of quarantine',\n            hour: '23:00',\n            activityType: 'rest',\n            imageUrl: '/assets/images/rest.jpg',\n            isCompleted: false\n        },\n        {\n            id: Math.random().toString(),\n            title: 'Hard work',\n            description: 'Work in the projects I have at Tribalyte',\n            hour: '9:00',\n            activityType: 'work',\n            imageUrl: '/assets/images/work.jpg',\n            isCompleted: false\n        },\n        {\n            id: Math.random().toString(),\n            title: 'Play ping pong',\n            description: 'Play a ping pong match on the hall table!',\n            hour: '19:00',\n            activityType: 'hobby',\n            imageUrl: '/assets/images/hobby.jpg',\n            isCompleted: false\n        }\n    ]);\n\n    const ObtenirPersones = (professor: boolean) => {\n        var persones = Array<Persona>();\n        $.ajax({\n            method: \"GET\",\n            url: \"http://192.168.2.212/ProjecteGit/Api/persona/json.php?professor=\" + (professor ? 1 : 0),\n        })\n            .done(function(res) {\n                $.each(res.records, function(i, item : Persona) {\n                    persones.push({\n                        codi: item.codi,\n                        Nom: item.Nom,\n                        Cognoms: item.Cognoms,\n                        professor: item.professor\n                    })\n                  });\n                  if (professor)\n                  {\n                    setProfessors(currProfessors => {\n                        return persones;\n                    });\n                  } else {\n                    setAlumnes(currProfessors => {\n                        return persones;\n                      });\n                  }\n            });\n    };\n\n    const Login = (email: string, password: string) => {\n        $.ajax({\n            method: \"POST\",\n            url: \"http://192.168.2.212/ProjecteGit/JWT/login.php\",\n            data: { email: email, password: password }\n        })\n            .done(function(res: LoginReturn) {\n                if (res.jwt){\n\n                }\n            })\n            .error(function(res){\n                debugger;\n            });\n    };\n\n    const Registrar = (nom: string, cognom: string, email: string, password: string) => {\n        $.ajax({\n            method: \"POST\",\n            url: \"http://192.168.2.212/ProjecteGit/JWT/create_user.php\",\n            data: { firstname: nom, lastname: cognom, email: email, password: password }\n        })\n            .done(function(res: LoginReturn) {\n                if (res.jwt){\n\n                }\n            });\n    };\n\n    const [professors, setProfessors] = useState<Persona[]>([]);\n\n    const [alumnes, setAlumnes] = useState<Persona[]>([]);\n\n    const addActivity = (title: string, description: string, activityType: ActivityType) => {\n        let imageUrl = '';\n        switch(activityType) {\n            case 'rest':\n                imageUrl = '/assets/images/rest.jpg'\n                break;\n            case 'hobby':\n                imageUrl = '/assets/images/hobby.jpg'\n                break;\n            case 'work':\n                imageUrl = '/assets/images/work.jpg'\n                break;\n            default:\n                imageUrl = '/assets/images/work.jpg'\n                break;\n        };\n\n        const activityDate = new Date();\n        const hour = activityDate.getHours() + ':' + activityDate.getMinutes();\n\n        const addActivity: Activity = {\n            id: Math.random().toString(),\n            title,\n            description,\n            hour,\n            activityType,\n            imageUrl,\n            isCompleted: false\n        };\n\n        setActivities(currActivities => {\n            return [...currActivities, addActivity]\n        })\n    };\n\n    const completeActivity = (activityId: string) => {\n        setActivities(currActivities => {\n            const updatedActivities = [...currActivities];\n            const selectedActivityIndex = activities.findIndex(act => act.id === activityId);\n            const updatedActivity = {...updatedActivities[selectedActivityIndex], isCompleted: true};\n            updatedActivities[selectedActivityIndex] = updatedActivity;\n            return updatedActivities;\n        });\n    };\n\n    const jwt = '';\n\n    const activitiesContext: ActivitiesContextModel = {\n        activities,\n        addActivity,\n        completeActivity,\n        alumnes,\n        professors,\n        ObtenirPersones,\n        jwt,\n        Login,\n        Registrar\n    };\n\n    return (\n        <ActivitiesContext.Provider value={activitiesContext}>\n            {props.children}\n        </ActivitiesContext.Provider>\n    );\n};\n\nexport default ActivitiesContextProvider;"]},"metadata":{},"sourceType":"module"}