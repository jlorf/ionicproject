{"ast":null,"code":"import { r as registerInstance, f as readTask, w as writeTask, i as forceUpdate, h, H as Host, e as getElement } from './index-2cd7e630.js';\nconst CELL_TYPE_ITEM = 'item';\nconst CELL_TYPE_HEADER = 'header';\nconst CELL_TYPE_FOOTER = 'footer';\nconst NODE_CHANGE_NONE = 0;\nconst NODE_CHANGE_POSITION = 1;\nconst NODE_CHANGE_CELL = 2;\nconst MIN_READS = 2;\n\nconst updateVDom = (dom, heightIndex, cells, range) => {\n  // reset dom\n  for (const node of dom) {\n    node.change = NODE_CHANGE_NONE;\n    node.d = true;\n  } // try to match into exisiting dom\n\n\n  const toMutate = [];\n  const end = range.offset + range.length;\n\n  for (let i = range.offset; i < end; i++) {\n    const cell = cells[i];\n    const node = dom.find(n => n.d && n.cell === cell);\n\n    if (node) {\n      const top = heightIndex[i];\n\n      if (top !== node.top) {\n        node.top = top;\n        node.change = NODE_CHANGE_POSITION;\n      }\n\n      node.d = false;\n    } else {\n      toMutate.push(cell);\n    }\n  } // needs to append\n\n\n  const pool = dom.filter(n => n.d);\n\n  for (const cell of toMutate) {\n    const node = pool.find(n => n.d && n.cell.type === cell.type);\n    const index = cell.i;\n\n    if (node) {\n      node.d = false;\n      node.change = NODE_CHANGE_CELL;\n      node.cell = cell;\n      node.top = heightIndex[index];\n    } else {\n      dom.push({\n        d: false,\n        cell,\n        visible: true,\n        change: NODE_CHANGE_CELL,\n        top: heightIndex[index]\n      });\n    }\n  }\n\n  dom.filter(n => n.d && n.top !== -9999).forEach(n => {\n    n.change = NODE_CHANGE_POSITION;\n    n.top = -9999;\n  });\n};\n\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\n  const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\n  const childrenNu = children.length;\n  let child;\n\n  for (let i = 0; i < dom.length; i++) {\n    const node = dom[i];\n    const cell = node.cell; // the cell change, the content must be updated\n\n    if (node.change === NODE_CHANGE_CELL) {\n      if (i < childrenNu) {\n        child = children[i];\n        nodeRender(child, cell, i);\n      } else {\n        const newChild = createNode(el, cell.type);\n        child = nodeRender(newChild, cell, i) || newChild;\n        child.classList.add('virtual-item');\n        el.appendChild(child);\n      }\n\n      child['$ionCell'] = cell;\n    } else {\n      child = children[i];\n    } // only update position when it changes\n\n\n    if (node.change !== NODE_CHANGE_NONE) {\n      child.style.transform = `translate3d(0,${node.top}px,0)`;\n    } // update visibility\n\n\n    const visible = cell.visible;\n\n    if (node.visible !== visible) {\n      if (visible) {\n        child.classList.remove('virtual-loading');\n      } else {\n        child.classList.add('virtual-loading');\n      }\n\n      node.visible = visible;\n    } // dynamic height\n\n\n    if (cell.reads > 0) {\n      updateCellHeight(cell, child);\n      cell.reads--;\n    }\n  }\n};\n\nconst createNode = (el, type) => {\n  const template = getTemplate(el, type);\n\n  if (template && el.ownerDocument) {\n    return el.ownerDocument.importNode(template.content, true).children[0];\n  }\n\n  return null;\n};\n\nconst getTemplate = (el, type) => {\n  switch (type) {\n    case CELL_TYPE_ITEM:\n      return el.querySelector('template:not([name])');\n\n    case CELL_TYPE_HEADER:\n      return el.querySelector('template[name=header]');\n\n    case CELL_TYPE_FOOTER:\n      return el.querySelector('template[name=footer]');\n  }\n};\n\nconst getViewport = (scrollTop, vierportHeight, margin) => {\n  return {\n    top: Math.max(scrollTop - margin, 0),\n    bottom: scrollTop + vierportHeight + margin\n  };\n};\n\nconst getRange = (heightIndex, viewport, buffer) => {\n  const topPos = viewport.top;\n  const bottomPos = viewport.bottom; // find top index\n\n  let i = 0;\n\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] > topPos) {\n      break;\n    }\n  }\n\n  const offset = Math.max(i - buffer - 1, 0); // find bottom index\n\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] >= bottomPos) {\n      break;\n    }\n  }\n\n  const end = Math.min(i + buffer, heightIndex.length);\n  const length = end - offset;\n  return {\n    offset,\n    length\n  };\n};\n\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\n  const end = range.offset + range.length;\n  return dirtyIndex <= end || currentRange.offset !== range.offset || currentRange.length !== range.length;\n};\n\nconst findCellIndex = (cells, index) => {\n  const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n\n  if (index === 0) {\n    return 0;\n  } else if (index === max + 1) {\n    return cells.length;\n  } else {\n    return cells.findIndex(c => c.index === index);\n  }\n};\n\nconst inplaceUpdate = (dst, src, offset) => {\n  if (offset === 0 && src.length >= dst.length) {\n    return src;\n  }\n\n  for (let i = 0; i < src.length; i++) {\n    dst[i + offset] = src[i];\n  }\n\n  return dst;\n};\n\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\n  const cells = [];\n  const end = len + offset;\n\n  for (let i = offset; i < end; i++) {\n    const item = items[i];\n\n    if (headerFn) {\n      const value = headerFn(item, i, items);\n\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_HEADER,\n          value,\n          index: i,\n          height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n          reads: headerHeight ? 0 : MIN_READS,\n          visible: !!headerHeight\n        });\n      }\n    }\n\n    cells.push({\n      i: j++,\n      type: CELL_TYPE_ITEM,\n      value: item,\n      index: i,\n      height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n      reads: itemHeight ? 0 : MIN_READS,\n      visible: !!itemHeight\n    });\n\n    if (footerFn) {\n      const value = footerFn(item, i, items);\n\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_FOOTER,\n          value,\n          index: i,\n          height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\n          reads: footerHeight ? 0 : MIN_READS,\n          visible: !!footerHeight\n        });\n      }\n    }\n  }\n\n  return cells;\n};\n\nconst calcHeightIndex = (buf, cells, index) => {\n  let acum = buf[index];\n\n  for (let i = index; i < buf.length; i++) {\n    buf[i] = acum;\n    acum += cells[i].height;\n  }\n\n  return acum;\n};\n\nconst resizeBuffer = (buf, len) => {\n  if (!buf) {\n    return new Uint32Array(len);\n  }\n\n  if (buf.length === len) {\n    return buf;\n  } else if (len > buf.length) {\n    const newBuf = new Uint32Array(len);\n    newBuf.set(buf);\n    return newBuf;\n  } else {\n    return buf.subarray(0, len);\n  }\n};\n\nconst positionForIndex = (index, cells, heightIndex) => {\n  const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\n\n  if (cell) {\n    return heightIndex[cell.i];\n  }\n\n  return -1;\n};\n\nconst virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\nconst VirtualScroll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.range = {\n      offset: 0,\n      length: 0\n    };\n    this.viewportHeight = 0;\n    this.cells = [];\n    this.virtualDom = [];\n    this.isEnabled = false;\n    this.viewportOffset = 0;\n    this.currentScrollTop = 0;\n    this.indexDirty = 0;\n    this.lastItemLen = 0;\n    this.totalHeight = 0;\n    /**\n     * It is important to provide this\n     * if virtual item height will be significantly larger than the default\n     * The approximate height of each virtual item template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n\n    this.approxItemHeight = 45;\n    /**\n     * The approximate height of each header template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n\n    this.approxHeaderHeight = 30;\n    /**\n     * The approximate width of each footer template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n\n    this.approxFooterHeight = 30;\n\n    this.onScroll = () => {\n      this.updateVirtualScroll();\n    };\n  }\n\n  itemsChanged() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n\n  async connectedCallback() {\n    const contentEl = this.el.closest('ion-content');\n\n    if (!contentEl) {\n      console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n      return;\n    }\n\n    this.scrollEl = await contentEl.getScrollElement();\n    this.contentEl = contentEl;\n    this.calcCells();\n    this.updateState();\n  }\n\n  componentDidUpdate() {\n    this.updateState();\n  }\n\n  disconnectedCallback() {\n    this.scrollEl = undefined;\n  }\n\n  onResize() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  /**\n   * Returns the position of the virtual item at the given index.\n   */\n\n\n  positionForItem(index) {\n    return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n  }\n  /**\n   * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n   * dirty any time the content or their style changes.\n   *\n   * The subset of items to be updated can are specifing by an offset and a length.\n   */\n\n\n  async checkRange(offset, len = -1) {\n    // TODO: kind of hacky how we do in-place updated of the cells\n    // array. this part needs a complete refactor\n    if (!this.items) {\n      return;\n    }\n\n    const length = len === -1 ? this.items.length - offset : len;\n    const cellIndex = findCellIndex(this.cells, offset);\n    const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n    this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n    this.lastItemLen = this.items.length;\n    this.indexDirty = Math.max(offset - 1, 0);\n    this.scheduleUpdate();\n  }\n  /**\n   * This method marks the tail the items array as dirty, so they can be re-rendered.\n   *\n   * It's equivalent to calling:\n   *\n   * ```js\n   * virtualScroll.checkRange(lastItemLen);\n   * ```\n   */\n\n\n  async checkEnd() {\n    if (this.items) {\n      this.checkRange(this.lastItemLen);\n    }\n  }\n\n  updateVirtualScroll() {\n    // do nothing if virtual-scroll is disabled\n    if (!this.isEnabled || !this.scrollEl) {\n      return;\n    } // unschedule future updates\n\n\n    if (this.timerUpdate) {\n      clearTimeout(this.timerUpdate);\n      this.timerUpdate = undefined;\n    } // schedule DOM operations into the stencil queue\n\n\n    readTask(this.readVS.bind(this));\n    writeTask(this.writeVS.bind(this));\n  }\n\n  readVS() {\n    const {\n      contentEl,\n      scrollEl,\n      el\n    } = this;\n    let topOffset = 0;\n    let node = el;\n\n    while (node && node !== contentEl) {\n      topOffset += node.offsetTop;\n      node = node.parentElement;\n    }\n\n    this.viewportOffset = topOffset;\n\n    if (scrollEl) {\n      this.viewportHeight = scrollEl.offsetHeight;\n      this.currentScrollTop = scrollEl.scrollTop;\n    }\n  }\n\n  writeVS() {\n    const dirtyIndex = this.indexDirty; // get visible viewport\n\n    const scrollTop = this.currentScrollTop - this.viewportOffset;\n    const viewport = getViewport(scrollTop, this.viewportHeight, 100); // compute lazily the height index\n\n    const heightIndex = this.getHeightIndex(); // get array bounds of visible cells base in the viewport\n\n    const range = getRange(heightIndex, viewport, 2); // fast path, do nothing\n\n    const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n\n    if (!shouldUpdate) {\n      return;\n    }\n\n    this.range = range; // in place mutation of the virtual DOM\n\n    updateVDom(this.virtualDom, heightIndex, this.cells, range); // Write DOM\n    // Different code paths taken depending of the render API used\n\n    if (this.nodeRender) {\n      doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n    } else if (this.domRender) {\n      this.domRender(this.virtualDom);\n    } else if (this.renderItem) {\n      forceUpdate(this);\n    }\n  }\n\n  updateCellHeight(cell, node) {\n    const update = () => {\n      if (node['$ionCell'] === cell) {\n        const style = window.getComputedStyle(node);\n        const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n        this.setCellHeight(cell, height);\n      }\n    };\n\n    if (node && node.componentOnReady) {\n      node.componentOnReady().then(update);\n    } else {\n      update();\n    }\n  }\n\n  setCellHeight(cell, height) {\n    const index = cell.i; // the cell might changed since the height update was scheduled\n\n    if (cell !== this.cells[index]) {\n      return;\n    }\n\n    if (cell.height !== height || cell.visible !== true) {\n      cell.visible = true;\n      cell.height = height;\n      this.indexDirty = Math.min(this.indexDirty, index);\n      this.scheduleUpdate();\n    }\n  }\n\n  scheduleUpdate() {\n    clearTimeout(this.timerUpdate);\n    this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n  }\n\n  updateState() {\n    const shouldEnable = !!(this.scrollEl && this.cells);\n\n    if (shouldEnable !== this.isEnabled) {\n      this.enableScrollEvents(shouldEnable);\n\n      if (shouldEnable) {\n        this.updateVirtualScroll();\n      }\n    }\n  }\n\n  calcCells() {\n    if (!this.items) {\n      return;\n    }\n\n    this.lastItemLen = this.items.length;\n    this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n    this.indexDirty = 0;\n  }\n\n  getHeightIndex() {\n    if (this.indexDirty !== Infinity) {\n      this.calcHeightIndex(this.indexDirty);\n    }\n\n    return this.heightIndex;\n  }\n\n  calcHeightIndex(index = 0) {\n    // TODO: optimize, we don't need to calculate all the cells\n    this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n    this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n    this.indexDirty = Infinity;\n  }\n\n  enableScrollEvents(shouldListen) {\n    if (this.rmEvent) {\n      this.rmEvent();\n      this.rmEvent = undefined;\n    }\n\n    const scrollEl = this.scrollEl;\n\n    if (scrollEl) {\n      this.isEnabled = shouldListen;\n      scrollEl.addEventListener('scroll', this.onScroll);\n\n      this.rmEvent = () => {\n        scrollEl.removeEventListener('scroll', this.onScroll);\n      };\n    }\n  }\n\n  renderVirtualNode(node) {\n    const {\n      type,\n      value,\n      index\n    } = node.cell;\n\n    switch (type) {\n      case CELL_TYPE_ITEM:\n        return this.renderItem(value, index);\n\n      case CELL_TYPE_HEADER:\n        return this.renderHeader(value, index);\n\n      case CELL_TYPE_FOOTER:\n        return this.renderFooter(value, index);\n    }\n  }\n\n  render() {\n    return h(Host, {\n      style: {\n        height: `${this.totalHeight}px`\n      }\n    }, this.renderItem && h(VirtualProxy, {\n      dom: this.virtualDom\n    }, this.virtualDom.map(node => this.renderVirtualNode(node))));\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"itemHeight\": [\"itemsChanged\"],\n      \"headerHeight\": [\"itemsChanged\"],\n      \"footerHeight\": [\"itemsChanged\"],\n      \"items\": [\"itemsChanged\"]\n    };\n  }\n\n};\n\nconst VirtualProxy = ({\n  dom\n}, children, utils) => {\n  return utils.map(children, (child, i) => {\n    const node = dom[i];\n    const vattrs = child.vattrs || {};\n    let classes = vattrs.class || '';\n    classes += 'virtual-item ';\n\n    if (!node.visible) {\n      classes += 'virtual-loading';\n    }\n\n    return Object.assign(Object.assign({}, child), {\n      vattrs: Object.assign(Object.assign({}, vattrs), {\n        class: classes,\n        style: Object.assign(Object.assign({}, vattrs.style), {\n          transform: `translate3d(0,${node.top}px,0)`\n        })\n      })\n    });\n  });\n};\n\nVirtualScroll.style = virtualScrollCss;\nexport { VirtualScroll as ion_virtual_scroll };","map":{"version":3,"sources":["/home/joel/projecteionic/node_modules/@ionic/core/dist/esm-es5/ion-virtual-scroll.entry.js"],"names":["r","registerInstance","f","readTask","w","writeTask","i","forceUpdate","h","H","Host","e","getElement","CELL_TYPE_ITEM","CELL_TYPE_HEADER","CELL_TYPE_FOOTER","NODE_CHANGE_NONE","NODE_CHANGE_POSITION","NODE_CHANGE_CELL","MIN_READS","updateVDom","dom","heightIndex","cells","range","node","change","d","toMutate","end","offset","length","cell","find","n","top","push","pool","filter","type","index","visible","forEach","doRender","el","nodeRender","updateCellHeight","children","Array","from","tagName","childrenNu","child","newChild","createNode","classList","add","appendChild","style","transform","remove","reads","template","getTemplate","ownerDocument","importNode","content","querySelector","getViewport","scrollTop","vierportHeight","margin","Math","max","bottom","getRange","viewport","buffer","topPos","bottomPos","min","getShouldUpdate","dirtyIndex","currentRange","findCellIndex","findIndex","c","inplaceUpdate","dst","src","calcCells","items","itemHeight","headerHeight","footerHeight","headerFn","footerFn","approxHeaderHeight","approxFooterHeight","approxItemHeight","j","len","item","value","height","calcHeightIndex","buf","acum","resizeBuffer","Uint32Array","newBuf","set","subarray","positionForIndex","virtualScrollCss","VirtualScroll","constructor","hostRef","viewportHeight","virtualDom","isEnabled","viewportOffset","currentScrollTop","indexDirty","lastItemLen","totalHeight","onScroll","updateVirtualScroll","itemsChanged","connectedCallback","contentEl","closest","console","error","scrollEl","getScrollElement","updateState","componentDidUpdate","disconnectedCallback","undefined","onResize","positionForItem","Promise","resolve","getHeightIndex","checkRange","cellIndex","scheduleUpdate","checkEnd","timerUpdate","clearTimeout","readVS","bind","writeVS","topOffset","offsetTop","parentElement","offsetHeight","shouldUpdate","domRender","renderItem","update","window","getComputedStyle","parseFloat","getPropertyValue","setCellHeight","componentOnReady","then","setTimeout","shouldEnable","enableScrollEvents","Infinity","shouldListen","rmEvent","addEventListener","removeEventListener","renderVirtualNode","renderHeader","renderFooter","render","VirtualProxy","map","watchers","utils","vattrs","classes","class","Object","assign","ion_virtual_scroll"],"mappings":"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","sourcesContent":["import { r as registerInstance, f as readTask, w as writeTask, i as forceUpdate, h, H as Host, e as getElement } from './index-2cd7e630.js';\n\nconst CELL_TYPE_ITEM = 'item';\nconst CELL_TYPE_HEADER = 'header';\nconst CELL_TYPE_FOOTER = 'footer';\nconst NODE_CHANGE_NONE = 0;\nconst NODE_CHANGE_POSITION = 1;\nconst NODE_CHANGE_CELL = 2;\n\nconst MIN_READS = 2;\nconst updateVDom = (dom, heightIndex, cells, range) => {\n    // reset dom\n    for (const node of dom) {\n        node.change = NODE_CHANGE_NONE;\n        node.d = true;\n    }\n    // try to match into exisiting dom\n    const toMutate = [];\n    const end = range.offset + range.length;\n    for (let i = range.offset; i < end; i++) {\n        const cell = cells[i];\n        const node = dom.find(n => n.d && n.cell === cell);\n        if (node) {\n            const top = heightIndex[i];\n            if (top !== node.top) {\n                node.top = top;\n                node.change = NODE_CHANGE_POSITION;\n            }\n            node.d = false;\n        }\n        else {\n            toMutate.push(cell);\n        }\n    }\n    // needs to append\n    const pool = dom.filter(n => n.d);\n    for (const cell of toMutate) {\n        const node = pool.find(n => n.d && n.cell.type === cell.type);\n        const index = cell.i;\n        if (node) {\n            node.d = false;\n            node.change = NODE_CHANGE_CELL;\n            node.cell = cell;\n            node.top = heightIndex[index];\n        }\n        else {\n            dom.push({\n                d: false,\n                cell,\n                visible: true,\n                change: NODE_CHANGE_CELL,\n                top: heightIndex[index],\n            });\n        }\n    }\n    dom\n        .filter(n => n.d && n.top !== -9999)\n        .forEach(n => {\n        n.change = NODE_CHANGE_POSITION;\n        n.top = -9999;\n    });\n};\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\n    const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\n    const childrenNu = children.length;\n    let child;\n    for (let i = 0; i < dom.length; i++) {\n        const node = dom[i];\n        const cell = node.cell;\n        // the cell change, the content must be updated\n        if (node.change === NODE_CHANGE_CELL) {\n            if (i < childrenNu) {\n                child = children[i];\n                nodeRender(child, cell, i);\n            }\n            else {\n                const newChild = createNode(el, cell.type);\n                child = nodeRender(newChild, cell, i) || newChild;\n                child.classList.add('virtual-item');\n                el.appendChild(child);\n            }\n            child['$ionCell'] = cell;\n        }\n        else {\n            child = children[i];\n        }\n        // only update position when it changes\n        if (node.change !== NODE_CHANGE_NONE) {\n            child.style.transform = `translate3d(0,${node.top}px,0)`;\n        }\n        // update visibility\n        const visible = cell.visible;\n        if (node.visible !== visible) {\n            if (visible) {\n                child.classList.remove('virtual-loading');\n            }\n            else {\n                child.classList.add('virtual-loading');\n            }\n            node.visible = visible;\n        }\n        // dynamic height\n        if (cell.reads > 0) {\n            updateCellHeight(cell, child);\n            cell.reads--;\n        }\n    }\n};\nconst createNode = (el, type) => {\n    const template = getTemplate(el, type);\n    if (template && el.ownerDocument) {\n        return el.ownerDocument.importNode(template.content, true).children[0];\n    }\n    return null;\n};\nconst getTemplate = (el, type) => {\n    switch (type) {\n        case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\n        case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\n        case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\n    }\n};\nconst getViewport = (scrollTop, vierportHeight, margin) => {\n    return {\n        top: Math.max(scrollTop - margin, 0),\n        bottom: scrollTop + vierportHeight + margin\n    };\n};\nconst getRange = (heightIndex, viewport, buffer) => {\n    const topPos = viewport.top;\n    const bottomPos = viewport.bottom;\n    // find top index\n    let i = 0;\n    for (; i < heightIndex.length; i++) {\n        if (heightIndex[i] > topPos) {\n            break;\n        }\n    }\n    const offset = Math.max(i - buffer - 1, 0);\n    // find bottom index\n    for (; i < heightIndex.length; i++) {\n        if (heightIndex[i] >= bottomPos) {\n            break;\n        }\n    }\n    const end = Math.min(i + buffer, heightIndex.length);\n    const length = end - offset;\n    return { offset, length };\n};\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\n    const end = range.offset + range.length;\n    return (dirtyIndex <= end ||\n        currentRange.offset !== range.offset ||\n        currentRange.length !== range.length);\n};\nconst findCellIndex = (cells, index) => {\n    const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n    if (index === 0) {\n        return 0;\n    }\n    else if (index === max + 1) {\n        return cells.length;\n    }\n    else {\n        return cells.findIndex(c => c.index === index);\n    }\n};\nconst inplaceUpdate = (dst, src, offset) => {\n    if (offset === 0 && src.length >= dst.length) {\n        return src;\n    }\n    for (let i = 0; i < src.length; i++) {\n        dst[i + offset] = src[i];\n    }\n    return dst;\n};\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\n    const cells = [];\n    const end = len + offset;\n    for (let i = offset; i < end; i++) {\n        const item = items[i];\n        if (headerFn) {\n            const value = headerFn(item, i, items);\n            if (value != null) {\n                cells.push({\n                    i: j++,\n                    type: CELL_TYPE_HEADER,\n                    value,\n                    index: i,\n                    height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n                    reads: headerHeight ? 0 : MIN_READS,\n                    visible: !!headerHeight,\n                });\n            }\n        }\n        cells.push({\n            i: j++,\n            type: CELL_TYPE_ITEM,\n            value: item,\n            index: i,\n            height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n            reads: itemHeight ? 0 : MIN_READS,\n            visible: !!itemHeight,\n        });\n        if (footerFn) {\n            const value = footerFn(item, i, items);\n            if (value != null) {\n                cells.push({\n                    i: j++,\n                    type: CELL_TYPE_FOOTER,\n                    value,\n                    index: i,\n                    height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\n                    reads: footerHeight ? 0 : MIN_READS,\n                    visible: !!footerHeight,\n                });\n            }\n        }\n    }\n    return cells;\n};\nconst calcHeightIndex = (buf, cells, index) => {\n    let acum = buf[index];\n    for (let i = index; i < buf.length; i++) {\n        buf[i] = acum;\n        acum += cells[i].height;\n    }\n    return acum;\n};\nconst resizeBuffer = (buf, len) => {\n    if (!buf) {\n        return new Uint32Array(len);\n    }\n    if (buf.length === len) {\n        return buf;\n    }\n    else if (len > buf.length) {\n        const newBuf = new Uint32Array(len);\n        newBuf.set(buf);\n        return newBuf;\n    }\n    else {\n        return buf.subarray(0, len);\n    }\n};\nconst positionForIndex = (index, cells, heightIndex) => {\n    const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\n    if (cell) {\n        return heightIndex[cell.i];\n    }\n    return -1;\n};\n\nconst virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\n\nconst VirtualScroll = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.range = { offset: 0, length: 0 };\n        this.viewportHeight = 0;\n        this.cells = [];\n        this.virtualDom = [];\n        this.isEnabled = false;\n        this.viewportOffset = 0;\n        this.currentScrollTop = 0;\n        this.indexDirty = 0;\n        this.lastItemLen = 0;\n        this.totalHeight = 0;\n        /**\n         * It is important to provide this\n         * if virtual item height will be significantly larger than the default\n         * The approximate height of each virtual item template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxItemHeight = 45;\n        /**\n         * The approximate height of each header template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxHeaderHeight = 30;\n        /**\n         * The approximate width of each footer template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxFooterHeight = 30;\n        this.onScroll = () => {\n            this.updateVirtualScroll();\n        };\n    }\n    itemsChanged() {\n        this.calcCells();\n        this.updateVirtualScroll();\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.contentEl = contentEl;\n        this.calcCells();\n        this.updateState();\n    }\n    componentDidUpdate() {\n        this.updateState();\n    }\n    disconnectedCallback() {\n        this.scrollEl = undefined;\n    }\n    onResize() {\n        this.calcCells();\n        this.updateVirtualScroll();\n    }\n    /**\n     * Returns the position of the virtual item at the given index.\n     */\n    positionForItem(index) {\n        return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n    }\n    /**\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n     * dirty any time the content or their style changes.\n     *\n     * The subset of items to be updated can are specifing by an offset and a length.\n     */\n    async checkRange(offset, len = -1) {\n        // TODO: kind of hacky how we do in-place updated of the cells\n        // array. this part needs a complete refactor\n        if (!this.items) {\n            return;\n        }\n        const length = (len === -1)\n            ? this.items.length - offset\n            : len;\n        const cellIndex = findCellIndex(this.cells, offset);\n        const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n        this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n        this.lastItemLen = this.items.length;\n        this.indexDirty = Math.max(offset - 1, 0);\n        this.scheduleUpdate();\n    }\n    /**\n     * This method marks the tail the items array as dirty, so they can be re-rendered.\n     *\n     * It's equivalent to calling:\n     *\n     * ```js\n     * virtualScroll.checkRange(lastItemLen);\n     * ```\n     */\n    async checkEnd() {\n        if (this.items) {\n            this.checkRange(this.lastItemLen);\n        }\n    }\n    updateVirtualScroll() {\n        // do nothing if virtual-scroll is disabled\n        if (!this.isEnabled || !this.scrollEl) {\n            return;\n        }\n        // unschedule future updates\n        if (this.timerUpdate) {\n            clearTimeout(this.timerUpdate);\n            this.timerUpdate = undefined;\n        }\n        // schedule DOM operations into the stencil queue\n        readTask(this.readVS.bind(this));\n        writeTask(this.writeVS.bind(this));\n    }\n    readVS() {\n        const { contentEl, scrollEl, el } = this;\n        let topOffset = 0;\n        let node = el;\n        while (node && node !== contentEl) {\n            topOffset += node.offsetTop;\n            node = node.parentElement;\n        }\n        this.viewportOffset = topOffset;\n        if (scrollEl) {\n            this.viewportHeight = scrollEl.offsetHeight;\n            this.currentScrollTop = scrollEl.scrollTop;\n        }\n    }\n    writeVS() {\n        const dirtyIndex = this.indexDirty;\n        // get visible viewport\n        const scrollTop = this.currentScrollTop - this.viewportOffset;\n        const viewport = getViewport(scrollTop, this.viewportHeight, 100);\n        // compute lazily the height index\n        const heightIndex = this.getHeightIndex();\n        // get array bounds of visible cells base in the viewport\n        const range = getRange(heightIndex, viewport, 2);\n        // fast path, do nothing\n        const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n        if (!shouldUpdate) {\n            return;\n        }\n        this.range = range;\n        // in place mutation of the virtual DOM\n        updateVDom(this.virtualDom, heightIndex, this.cells, range);\n        // Write DOM\n        // Different code paths taken depending of the render API used\n        if (this.nodeRender) {\n            doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n        }\n        else if (this.domRender) {\n            this.domRender(this.virtualDom);\n        }\n        else if (this.renderItem) {\n            forceUpdate(this);\n        }\n    }\n    updateCellHeight(cell, node) {\n        const update = () => {\n            if (node['$ionCell'] === cell) {\n                const style = window.getComputedStyle(node);\n                const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n                this.setCellHeight(cell, height);\n            }\n        };\n        if (node && node.componentOnReady) {\n            node.componentOnReady().then(update);\n        }\n        else {\n            update();\n        }\n    }\n    setCellHeight(cell, height) {\n        const index = cell.i;\n        // the cell might changed since the height update was scheduled\n        if (cell !== this.cells[index]) {\n            return;\n        }\n        if (cell.height !== height || cell.visible !== true) {\n            cell.visible = true;\n            cell.height = height;\n            this.indexDirty = Math.min(this.indexDirty, index);\n            this.scheduleUpdate();\n        }\n    }\n    scheduleUpdate() {\n        clearTimeout(this.timerUpdate);\n        this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n    }\n    updateState() {\n        const shouldEnable = !!(this.scrollEl &&\n            this.cells);\n        if (shouldEnable !== this.isEnabled) {\n            this.enableScrollEvents(shouldEnable);\n            if (shouldEnable) {\n                this.updateVirtualScroll();\n            }\n        }\n    }\n    calcCells() {\n        if (!this.items) {\n            return;\n        }\n        this.lastItemLen = this.items.length;\n        this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n        this.indexDirty = 0;\n    }\n    getHeightIndex() {\n        if (this.indexDirty !== Infinity) {\n            this.calcHeightIndex(this.indexDirty);\n        }\n        return this.heightIndex;\n    }\n    calcHeightIndex(index = 0) {\n        // TODO: optimize, we don't need to calculate all the cells\n        this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n        this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n        this.indexDirty = Infinity;\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.rmEvent) {\n            this.rmEvent();\n            this.rmEvent = undefined;\n        }\n        const scrollEl = this.scrollEl;\n        if (scrollEl) {\n            this.isEnabled = shouldListen;\n            scrollEl.addEventListener('scroll', this.onScroll);\n            this.rmEvent = () => {\n                scrollEl.removeEventListener('scroll', this.onScroll);\n            };\n        }\n    }\n    renderVirtualNode(node) {\n        const { type, value, index } = node.cell;\n        switch (type) {\n            case CELL_TYPE_ITEM: return this.renderItem(value, index);\n            case CELL_TYPE_HEADER: return this.renderHeader(value, index);\n            case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\n        }\n    }\n    render() {\n        return (h(Host, { style: {\n                height: `${this.totalHeight}px`\n            } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"itemHeight\": [\"itemsChanged\"],\n        \"headerHeight\": [\"itemsChanged\"],\n        \"footerHeight\": [\"itemsChanged\"],\n        \"items\": [\"itemsChanged\"]\n    }; }\n};\nconst VirtualProxy = ({ dom }, children, utils) => {\n    return utils.map(children, (child, i) => {\n        const node = dom[i];\n        const vattrs = child.vattrs || {};\n        let classes = vattrs.class || '';\n        classes += 'virtual-item ';\n        if (!node.visible) {\n            classes += 'virtual-loading';\n        }\n        return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\n    });\n};\nVirtualScroll.style = virtualScrollCss;\n\nexport { VirtualScroll as ion_virtual_scroll };\n"]},"metadata":{},"sourceType":"module"}