{"ast":null,"code":"const ION_FOCUSED = 'ion-focused';\nconst ION_FOCUSABLE = 'ion-focusable';\nconst FOCUS_KEYS = ['Tab', 'ArrowDown', 'Space', 'Escape', ' ', 'Shift', 'Enter', 'ArrowLeft', 'ArrowRight', 'ArrowUp'];\n\nconst startFocusVisible = () => {\n  let currentFocus = [];\n  let keyboardMode = true;\n  const doc = document;\n\n  const setFocus = elements => {\n    currentFocus.forEach(el => el.classList.remove(ION_FOCUSED));\n    elements.forEach(el => el.classList.add(ION_FOCUSED));\n    currentFocus = elements;\n  };\n\n  const pointerDown = () => {\n    keyboardMode = false;\n    setFocus([]);\n  };\n\n  doc.addEventListener('keydown', ev => {\n    keyboardMode = FOCUS_KEYS.includes(ev.key);\n\n    if (!keyboardMode) {\n      setFocus([]);\n    }\n  });\n  doc.addEventListener('focusin', ev => {\n    if (keyboardMode && ev.composedPath) {\n      const toFocus = ev.composedPath().filter(el => {\n        if (el.classList) {\n          return el.classList.contains(ION_FOCUSABLE);\n        }\n\n        return false;\n      });\n      setFocus(toFocus);\n    }\n  });\n  doc.addEventListener('focusout', () => {\n    if (doc.activeElement === doc.body) {\n      setFocus([]);\n    }\n  });\n  doc.addEventListener('touchstart', pointerDown);\n  doc.addEventListener('mousedown', pointerDown);\n};\n\nexport { startFocusVisible };","map":{"version":3,"sources":["/home/joel/projecteionic/node_modules/@ionic/core/dist/esm-es5/focus-visible-15ada7f7.js"],"names":["ION_FOCUSED","ION_FOCUSABLE","FOCUS_KEYS","startFocusVisible","currentFocus","keyboardMode","doc","document","setFocus","elements","forEach","el","classList","remove","add","pointerDown","addEventListener","ev","includes","key","composedPath","toFocus","filter","contains","activeElement","body"],"mappings":"AAAA,MAAMA,WAAW,GAAG,aAApB;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,UAAU,GAAG,CAAC,KAAD,EAAQ,WAAR,EAAqB,OAArB,EAA8B,QAA9B,EAAwC,GAAxC,EAA6C,OAA7C,EAAsD,OAAtD,EAA+D,WAA/D,EAA4E,YAA5E,EAA0F,SAA1F,CAAnB;;AACA,MAAMC,iBAAiB,GAAG,MAAM;AAC5B,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,YAAY,GAAG,IAAnB;AACA,QAAMC,GAAG,GAAGC,QAAZ;;AACA,QAAMC,QAAQ,GAAIC,QAAD,IAAc;AAC3BL,IAAAA,YAAY,CAACM,OAAb,CAAqBC,EAAE,IAAIA,EAAE,CAACC,SAAH,CAAaC,MAAb,CAAoBb,WAApB,CAA3B;AACAS,IAAAA,QAAQ,CAACC,OAAT,CAAiBC,EAAE,IAAIA,EAAE,CAACC,SAAH,CAAaE,GAAb,CAAiBd,WAAjB,CAAvB;AACAI,IAAAA,YAAY,GAAGK,QAAf;AACH,GAJD;;AAKA,QAAMM,WAAW,GAAG,MAAM;AACtBV,IAAAA,YAAY,GAAG,KAAf;AACAG,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,GAHD;;AAIAF,EAAAA,GAAG,CAACU,gBAAJ,CAAqB,SAArB,EAAgCC,EAAE,IAAI;AAClCZ,IAAAA,YAAY,GAAGH,UAAU,CAACgB,QAAX,CAAoBD,EAAE,CAACE,GAAvB,CAAf;;AACA,QAAI,CAACd,YAAL,EAAmB;AACfG,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH;AACJ,GALD;AAMAF,EAAAA,GAAG,CAACU,gBAAJ,CAAqB,SAArB,EAAgCC,EAAE,IAAI;AAClC,QAAIZ,YAAY,IAAIY,EAAE,CAACG,YAAvB,EAAqC;AACjC,YAAMC,OAAO,GAAGJ,EAAE,CAACG,YAAH,GAAkBE,MAAlB,CAA0BX,EAAD,IAAQ;AAC7C,YAAIA,EAAE,CAACC,SAAP,EAAkB;AACd,iBAAOD,EAAE,CAACC,SAAH,CAAaW,QAAb,CAAsBtB,aAAtB,CAAP;AACH;;AACD,eAAO,KAAP;AACH,OALe,CAAhB;AAMAO,MAAAA,QAAQ,CAACa,OAAD,CAAR;AACH;AACJ,GAVD;AAWAf,EAAAA,GAAG,CAACU,gBAAJ,CAAqB,UAArB,EAAiC,MAAM;AACnC,QAAIV,GAAG,CAACkB,aAAJ,KAAsBlB,GAAG,CAACmB,IAA9B,EAAoC;AAChCjB,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH;AACJ,GAJD;AAKAF,EAAAA,GAAG,CAACU,gBAAJ,CAAqB,YAArB,EAAmCD,WAAnC;AACAT,EAAAA,GAAG,CAACU,gBAAJ,CAAqB,WAArB,EAAkCD,WAAlC;AACH,CArCD;;AAuCA,SAASZ,iBAAT","sourcesContent":["const ION_FOCUSED = 'ion-focused';\nconst ION_FOCUSABLE = 'ion-focusable';\nconst FOCUS_KEYS = ['Tab', 'ArrowDown', 'Space', 'Escape', ' ', 'Shift', 'Enter', 'ArrowLeft', 'ArrowRight', 'ArrowUp'];\nconst startFocusVisible = () => {\n    let currentFocus = [];\n    let keyboardMode = true;\n    const doc = document;\n    const setFocus = (elements) => {\n        currentFocus.forEach(el => el.classList.remove(ION_FOCUSED));\n        elements.forEach(el => el.classList.add(ION_FOCUSED));\n        currentFocus = elements;\n    };\n    const pointerDown = () => {\n        keyboardMode = false;\n        setFocus([]);\n    };\n    doc.addEventListener('keydown', ev => {\n        keyboardMode = FOCUS_KEYS.includes(ev.key);\n        if (!keyboardMode) {\n            setFocus([]);\n        }\n    });\n    doc.addEventListener('focusin', ev => {\n        if (keyboardMode && ev.composedPath) {\n            const toFocus = ev.composedPath().filter((el) => {\n                if (el.classList) {\n                    return el.classList.contains(ION_FOCUSABLE);\n                }\n                return false;\n            });\n            setFocus(toFocus);\n        }\n    });\n    doc.addEventListener('focusout', () => {\n        if (doc.activeElement === doc.body) {\n            setFocus([]);\n        }\n    });\n    doc.addEventListener('touchstart', pointerDown);\n    doc.addEventListener('mousedown', pointerDown);\n};\n\nexport { startFocusVisible };\n"]},"metadata":{},"sourceType":"module"}